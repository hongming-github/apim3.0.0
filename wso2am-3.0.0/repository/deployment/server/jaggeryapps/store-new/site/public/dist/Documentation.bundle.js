(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{6177:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=b(n(0)),o=b(n(3)),l=n(15),u=n(111),i=b(u),c=b(n(304)),s=b(n(16)),d=n(142),f=n(197),p=b(f),m=b(n(200)),y=b(n(37)),h=b(n(44)),v=b(n(6838));function b(e){return e&&e.__esModule?e:{default:e}}var w=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.client=new y.default,n.state={api:null,documentsList:null},n.api_id=n.props.match.params.api_uuid,n.initialDocSourceType=null,n.viewDocContentHandler=n.viewDocContentHandler.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),a(t,[{key:"componentDidMount",value:function(){var e=this;this.client.getDocumentsByAPIId(this.api_id).then(function(t){var n=[];if(t.obj.list.length>0)for(var a=t.obj.list,r=0;r<a.length;r++){for(var o=a[r].type,l=!1,u=0;u<n.length;u++)o===n[u].docType&&(n[u].docs.push(a[r]),l=!0);l||n.push({docType:o,docs:[a[r]]})}e.setState({documentsList:n})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"truncateSummary",value:function(e){var t=e;return e.length>200&&e.length>205&&(t=e.substring(1,200)+" ... "),t}},{key:"viewDocContentHandler",value:function(e){var t=this;this.client.getFileForDocument(this.api_id,e.documentId).then(function(e){t.downloadFile(e)}).catch(function(e){throw e})}},{key:"downloadFile",value:function(e){var t="",n=e.headers["content-disposition"];if(n&&-1!==n.indexOf("attachment")){var a=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(n);null!=a&&a[1]&&(t=a[1].replace(/['"]/g,""))}var r=e.headers["content-type"],o=new Blob([e.data],{type:r});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(o,t);else{var l=window.URL||window.webkitURL,u=l.createObjectURL(o);if(t){var i=document.createElement("a");void 0===i.download?window.location=u:(i.href=u,i.download=t,document.body.appendChild(i),i.click())}else window.location=u;setTimeout(function(){l.revokeObjectURL(u)},100)}}},{key:"render",value:function(){var e=this,t=this.props.classes;return this.state.documentsList?r.default.createElement("div",{className:t.root},this.state.documentsList&&this.state.documentsList.length>0&&r.default.createElement("div",null,this.state.documentsList.map(function(n){return r.default.createElement("div",{key:n.docType},r.default.createElement(p.default,{defaultExpanded:!0},r.default.createElement(f.ExpansionPanelSummary,{expandIcon:r.default.createElement(m.default,null)},r.default.createElement(s.default,{className:t.heading},n.docType)),r.default.createElement(f.ExpansionPanelDetails,null,r.default.createElement(i.default,null,n.docs.map(function(n){return r.default.createElement(u.ListItem,{key:n.documentId,className:t.listItem},"INLINE"===n.sourceType&&r.default.createElement(v.default,{doc:n,truncateSummary:e.truncateSummary(n.summary)}),"FILE"===n.sourceType&&r.default.createElement("a",{onClick:function(){return e.viewDocContentHandler(n)},className:t.summary},r.default.createElement(c.default,null,r.default.createElement(d.FileDownload,null)),r.default.createElement(u.ListItemText,{primary:n.name,secondary:e.truncateSummary(n.summary)})),"URL"===n.sourceType&&r.default.createElement("a",{href:n.sourceUrl,target:"_blank",className:t.summary},r.default.createElement(c.default,null,r.default.createElement(d.Link,null)),r.default.createElement(u.ListItemText,{primary:n.name,secondary:e.truncateSummary(n.summary)})))})))))}))):r.default.createElement(h.default,null)}}]),t}();w.propTypes={classes:o.default.object.isRequired},t.default=(0,l.withStyles)(function(e){return{root:{width:"100%",paddingTop:10},summary:{textDecoration:"none",display:"flex",paddingLeft:0,cursor:"pointer"},heading:{fontSize:e.typography.pxToRem(15),fontWeight:e.typography.fontWeightRegular},listItem:{paddingLeft:0}}})(w)},6838:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=b(n(0)),l=b(n(3)),u=n(15),i=b(n(113)),c=n(111),s=b(n(83)),d=b(n(63)),f=b(n(29)),p=b(n(16)),m=b(n(112)),y=b(n(84)),h=b(n(304)),v=b(n(314));function b(e){return e&&e.__esModule?e:{default:e}}function w(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function E(e){return o.default.createElement(y.default,r({direction:"up"},e))}var g=function(e){function t(){var e,n,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=Array(r),l=0;l<r;l++)o[l]=arguments[l];return n=a=w(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),a.state={open:!1},a.handleClickOpen=function(){a.setState({open:!0})},a.handleClose=function(){a.setState({open:!1})},w(a,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"render",value:function(){var e=this.props,t=e.classes,n=e.doc,a=e.truncateSummary;return o.default.createElement("div",null,o.default.createElement("a",{onClick:this.handleClickOpen,className:t.summary},o.default.createElement(h.default,null,o.default.createElement(v.default,null)),o.default.createElement(c.ListItemText,{primary:n.name,secondary:a})),o.default.createElement(i.default,{fullScreen:!0,open:this.state.open,onClose:this.handleClose,transition:E},o.default.createElement(s.default,{className:t.appBar},o.default.createElement(d.default,null,o.default.createElement(f.default,{color:"inherit",onClick:this.handleClose,"aria-label":"Close"},o.default.createElement(m.default,null)),o.default.createElement("div",{className:t.titleWrapper},o.default.createElement(p.default,{variant:"headline",gutterBottom:!0,className:t.headline},n.name),o.default.createElement(p.default,{variant:"caption",gutterBottom:!0,align:"left",className:t.caption},n.type)))),o.default.createElement(p.default,{gutterBottom:!0,noWrap:!0,className:t.docContent},n.summary)))}}]),t}();g.propTypes={classes:l.default.object.isRequired},t.default=(0,u.withStyles)(function(e){return{appBar:{position:"relative"},flex:{flex:1},docContent:{padding:20},caption:{color:e.palette.text.primary},headline:{color:e.palette.text.primary},summary:{textDecoration:"none",display:"flex",paddingLeft:0,cursor:"pointer"}}})(g)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,