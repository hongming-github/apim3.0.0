(window.webpackJsonp=window.webpackJsonp||[]).push([[4,6],{6172:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=y(a(0)),r=y(a(23)),o=y(a(140)),i=y(a(141)),u=y(a(305)),s=y(a(195)),c=y(a(303)),d=y(a(28)),f=y(a(196)),m=y(a(6213)),p=y(a(21)),h=y(a(38)),g=y(a(16)),E=y(a(37));function y(e){return e&&e.__esModule?e:{default:e}}var b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));v.call(a),a.state={sdkLanguages:null,items:null};var n=a.props,l=n.match,r=n.apiId;return a.api_uuid=l?l.params.api_uuid:r,a.filter_threshold=5,a.getSdkForApi=a.getSdkForApi.bind(a),a.handleClick=a.handleClick.bind(a),a.handleChange=a.handleChange.bind(a),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),n(t,[{key:"componentDidMount",value:function(){var e=this;(new E.default).getSdkLanguages().then(function(t){0!=t.obj.length?(e.setState({sdkLanguages:t.obj}),e.setState({items:t.obj})):e.setState({sdkLanguages:!1})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"getSdkForApi",value:function(e,t){var a=this;(new E.default).getSdk(e,t).then(function(e){var t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],a=e.data;(0,m.default)(a,t)}).catch(function(e){var t=e.status;404===t?a.setState({notFound:!0}):400===t?a.setState({badRequest:!0}):500===t&&a.setState({serverError:!0})})}},{key:"render",value:function(){var e=this,t=this.state.items;return this.props.onlyIcons?t&&l.default.createElement(l.default.Fragment,null,t.map(function(t,a){return a<3&&l.default.createElement(d.default,{item:!0,xs:4},l.default.createElement("a",{onClick:function(a){return e.handleClick(a,t)},style:{cursor:"pointer"}},l.default.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:80,height:80,margin:15}})))})):t?l.default.createElement(d.default,{container:!0,className:"tab-grid",spacing:0},l.default.createElement(d.default,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&l.default.createElement(d.default,{item:!0,style:{textAlign:"center"}},l.default.createElement(h.default,{id:"search",label:"Search SDK",type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),l.default.createElement(d.default,{container:!0,justify:"flex-start",spacing:Number(24)},t.map(function(t,a){return l.default.createElement(d.default,{key:a,item:!0},l.default.createElement("div",{style:{width:"auto",textAlign:"center"}},l.default.createElement(o.default,null,l.default.createElement("div",null,t.toString().toUpperCase()),l.default.createElement(s.default,null),l.default.createElement(u.default,{title:t.toString().toUpperCase(),src:"/store-new/site/public/images/sdks/"+new String(t)+".svg"},l.default.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:"100px",height:"100px",margin:"15px"}})),l.default.createElement(i.default,null,l.default.createElement(d.default,{container:!0,justify:"center"},l.default.createElement(r.default,{color:"secondary",onClick:function(a){return e.handleClick(a,t)}},l.default.createElement(c.default,null),"Download"))))))})))):l.default.createElement(p.default,null,l.default.createElement(d.default,{container:!0,style:{marginLeft:"10%",marginRight:"10%",width:"100%"},align:"center"},l.default.createElement(d.default,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},l.default.createElement(p.default,null,l.default.createElement(g.default,null,l.default.createElement(f.default,null),"No languages are configured.")))))}}]),t}(),v=function(){var e=this;this.handleClick=function(t,a){var n=e.api_uuid,l=a;e.getSdkForApi(n,l)},this.handleChange=function(t){var a=e.state.sdkLanguages;a=a.filter(function(e){return-1!==e.toLowerCase().search(t.target.value.toLowerCase())}),e.setState({items:a})}};t.default=b},6176:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=w(a(0)),r=w(a(3)),o=w(a(16)),i=w(a(28)),u=a(15),s=w(a(197)),c=w(a(204)),d=w(a(205)),f=a(24),m=w(a(195)),p=w(a(315)),h=w(a(23)),g=w(a(85)),E=a(5627),y=w(a(6835)),b=w(a(6173)),v=w(a(6172));function w(e){return e&&e.__esModule?e:{default:e}}function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var x=(0,u.withStyles)({root:{borderBottom:"1px solid rgba(0,0,0,.125)",marginBottom:-1,minHeight:56,"&$expanded":{minHeight:56}},content:{"&$expanded":{margin:"12px 0"},alignItems:"center"},expanded:{}})(function(e){return l.default.createElement(d.default,e)});x.muiName="ExpansionPanelSummary";var C=function(e){function t(){var e,a,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var l=arguments.length,r=Array(l),o=0;o<l;o++)r[o]=arguments[o];return a=n=k(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r))),n.state={value:0},n.handleExpandClick=function(){n.setState(function(e){return{expanded:!e.expanded}})},k(n,a)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),n(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme;return l.default.createElement(E.ApiContext.Consumer,null,function(e){var n=e.api;e.applicationsAvailable,e.subscribedApplications;return l.default.createElement(i.default,{container:!0,className:t.root,spacing:16},l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"credentials"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"API Credentials")),l.default.createElement(c.default,null,l.default.createElement(i.default,{container:!0,className:t.root,spacing:16},l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement("div",{className:t.subscriptionTop},l.default.createElement("div",{className:t.boxBadge},"2"),l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"Subscriptions"))),l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement(o.default,{variant:"subtitle2"},"Subscribe to an Application"),l.default.createElement("div",{className:t.subscriptionBox},l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"With an Existing Application"),l.default.createElement(o.default,{variant:"caption"},"Subscribe to an Application"),l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"With a New Application"))),l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement(o.default,null,"API Credentials are grouped in to applications. An application is primarily used to decouple the consumer from the APIs. It allows you to Generate and use a single key for multiple APIs and subscribe multiple times to a single API with different SLA levels.")))))),l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"credentials"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"Resources")),l.default.createElement(c.default,{className:t.resourceWrapper},n&&l.default.createElement(y.default,{api:n})),l.default.createElement(m.default,null),l.default.createElement(p.default,{className:t.actionPanel},l.default.createElement(h.default,{size:"small",color:"primary"},"Show More >>")))),l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"comments"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"Comments")),l.default.createElement(c.default,{className:t.resourceWrapper},n&&l.default.createElement(b.default,{apiId:n.id,showLatest:!0})),l.default.createElement(m.default,null),l.default.createElement(p.default,{className:t.actionPanel},l.default.createElement(h.default,{size:"small",color:"primary"},"Show More >>")))),l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"sdk"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"SDK Generation")),l.default.createElement(c.default,{className:t.resourceWrapper},l.default.createElement(i.default,{container:!0,className:t.root,spacing:16},n&&l.default.createElement(v.default,{apiId:n.id,onlyIcons:!0}),l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement(o.default,null,"If you wants to create a software application to consume the subscribed APIs, you can generate client side SDK for a supported language/framework and use it as a start point to write the software application.")))),l.default.createElement(m.default,null),l.default.createElement(p.default,{className:t.actionPanel},l.default.createElement(h.default,{size:"small",color:"primary"},"Show More >>")))),l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"docs"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"Documents")),l.default.createElement(c.default,null,l.default.createElement(i.default,{container:!0,className:t.root,spacing:16},l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement("div",{className:t.subscriptionTop},l.default.createElement("div",{className:t.boxBadge},"3"),l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"Documents"))),l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement(o.default,{variant:"subtitle2"},"Last Updated"),l.default.createElement("div",{className:t.subscriptionBox},l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"AboutmyApi.pdf"),l.default.createElement(o.default,{variant:"caption"},"Last updated 21 minutes ago"))))))),l.default.createElement(i.default,{item:!0,xs:6},l.default.createElement(s.default,{defaultExpanded:!0},l.default.createElement(x,null,l.default.createElement(g.default,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"docs"}),l.default.createElement(o.default,{className:t.heading,variant:"h6"},"Forum")),l.default.createElement(c.default,null,l.default.createElement(i.default,{container:!0,className:t.root,spacing:16},l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement("div",{className:t.subscriptionTop},l.default.createElement("div",{className:t.boxBadge},"1"),l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"Topic"))),l.default.createElement(i.default,{item:!0,xs:12},l.default.createElement(o.default,{variant:"subtitle2"},"Last Updated"),l.default.createElement("div",{className:t.subscriptionBox},l.default.createElement(f.Link,{to:"/",className:t.linkStyle},"Find pets fast"),l.default.createElement(o.default,{variant:"caption"},"Last updated 2 days ago"))))))))})}}]),t}();C.propTypes={classes:r.default.object.isRequired,theme:r.default.object.isRequired},t.default=(0,u.withStyles)(function(e){return{root:{padding:3*e.spacing.unit,width:e.custom.contentAreaWidth},iconClass:{marginRight:10,color:e.palette.secondary.main},boxBadge:{background:e.palette.grey.A400,color:e.palette.getContrastText(e.palette.grey.A400),fontSize:e.typography.h5.fontSize,padding:e.spacing.unit,width:30,height:30,marginRight:20,textAlign:"center"},subscriptionBox:{paddingLeft:2*e.spacing.unit},linkStyle:{color:e.palette.getContrastText(e.palette.background.default),fontSize:e.typography.fontSize},subscriptionTop:{display:"flex",flexDirection:"row",alignItems:"center"},resourceWrapper:{height:192,overflow:"auto"},actionPanel:{justifyContent:"flex-start"}}},{withTheme:!0})(C)},6213:function(e,t){e.exports=function(e,t,a,n){var l=new Blob(void 0!==n?[n,e]:[e],{type:a||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(l,t);else{var r=window.URL.createObjectURL(l),o=document.createElement("a");o.style.display="none",o.href=r,o.setAttribute("download",t),void 0===o.download&&o.setAttribute("target","_blank"),document.body.appendChild(o),o.click(),document.body.removeChild(o),window.URL.revokeObjectURL(r)}}},6835:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=c(a(0)),r=c(a(16)),o=a(15),i=c(a(3)),u=c(a(143)),s=c(a(37));function c(e){return e&&e.__esModule?e:{default:e}}function d(e){var t=e.theme,a=e.method,n=t.custom.resourceChipColors?t.custom.resourceChipColors[a]:null,r="#000000";return n?r=t.palette.getContrastText(t.custom.resourceChipColors[a]):(console.log("Check the theme settings. The resourceChipColors is not populated properlly"),n="#cccccc"),l.default.createElement(u.default,{label:a,style:{backgroundColor:n,color:r,height:20}})}d.propTypes={classes:i.default.object.isRequired};var f=(0,o.withTheme)()(d),m=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={paths:null,swagger:{}},a.api=new s.default,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),n(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props.api;this.api.getSwaggerByAPIId(t.id).then(function(t){void 0!==t.obj.paths&&e.setState({paths:t.obj.paths})}).catch(function(t){var a=t.status;if(404===a)e.setState({notFound:!0});else if(401===a){e.setState({isAuthorize:!1});var n=qs.stringify({reference:e.props.location.pathname});e.props.history.push({pathname:"/login",search:n})}})}},{key:"render",value:function(){var e=this.state.paths;if(this.state.notFound)return l.default.createElement("div",null,"resource not found...");if(!e)return l.default.createElement("div",null,"loading...");var t=this.props.classes;return l.default.createElement("div",{className:t.root},l.default.createElement("div",{className:t.contentWrapper},Object.keys(e).map(function(a){var n=e[a];return l.default.createElement("div",{className:t.root},l.default.createElement(r.default,{className:t.heading,variant:"body1"},a),Object.keys(n).map(function(e){return l.default.createElement(f,{method:e})}))})))}}]),t}();m.propTypes={classes:i.default.object.isRequired},t.default=(0,o.withStyles)({root:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:10},heading:{marginRight:20}})(m)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,