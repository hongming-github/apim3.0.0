(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{6178:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r=O(a(0)),i=a(24),o=O(a(3)),u=a(15),c=a(110),s=O(a(23)),p=O(a(113)),d=O(a(84)),f=O(a(83)),m=O(a(63)),h=O(a(29)),b=O(a(112)),g=O(a(28)),y=O(a(6)),v=O(a(85)),E=O(a(5662)),C=O(a(6253)),S=a(5627),k=O(a(6839)),w=O(a(323)),T=O(a(6840)),A=O(a(324)),N=O(a(193));function O(e){return e&&e.__esModule?e:{default:e}}function x(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function R(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _(e){return r.default.createElement(d.default,l({direction:"up"},e))}var P=function(e){function t(){var e,a,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var l=arguments.length,r=Array(l),i=0;i<l;i++)r[i]=arguments[i];return a=n=R(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r))),n.state={value:0,expanded:!0,wizardOn:!1,openAvailable:!1,openNew:!1,openExpress:!1,selectedAppId:!1,selectedKeyType:!1},n.handleExpandClick=function(){n.setState(function(e){return{expanded:!e.expanded}})},n.startStopWizard=function(){n.setState(function(e){return{wizardOn:!e.wizardOn}})},n.handleSubscribe=function(e){var t=n.subscribeToApi.createSubscription();t&&t.then(function(t){console.log("Subscription created successfully with ID : "+t.body.subscriptionId),N.default.info("Subscribed successfully"),e&&e(),n.setState({openAvailable:!1})}).catch(function(e){console.log("Error while creating the subscription."),console.error(e)})},n.handleClickToggle=function(e,t){t&&t(),n.setState(x({},e,!n.state[e]))},n.loadInfo=function(e,t){n.setState({selectedKeyType:e,selectedAppId:t})},R(n,a)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),n(t,[{key:"handleSubscriptionDelete",value:function(e,t){(new A.default).deleteSubscription(e).then(function(e){if(200!==e.status)return console.log(e),void N.default.info("Something went wrong while deleting the Subscription!");N.default.info("Subscription deleted successfully!"),t&&t()})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.theme,l=this.state,o=l.selectedKeyType,u=l.selectedAppId;return r.default.createElement(S.ApiContext.Consumer,null,function(t){var l=t.api,d=t.applicationsAvailable,S=t.subscribedApplications,A=t.updateSubscriptionData;return r.default.createElement("div",{className:a.contentWrapper},r.default.createElement(c.Typography,{onClick:e.handleExpandClick,variant:"display1",className:a.titleSub},"API Credentials"),r.default.createElement(c.Typography,{variant:"body1",gutterBottom:!0},"API Credentials are grouped in to applications. An application is primarily used to decouple the consumer from the APIs. It allows you to Generate and use a single key for multiple APIs and subscribe multiple times to a single API with different SLA levels."),0===d.length&&0===S.length?!e.state.wizardOn&&r.default.createElement(w.default,{handleMenuSelect:e.startStopWizard,type:"info"},r.default.createElement(c.Typography,{variant:"headline",component:"h3"},"Generate Credentials"),r.default.createElement(c.Typography,{component:"p"},"You need to generate credentials to access this API"),r.default.createElement(s.default,{variant:"contained",color:"primary",className:a.button,onClick:e.startStopWizard},"GENERATE")):r.default.createElement(r.default.Fragment,null,r.default.createElement("div",{className:a.subscribeButtons},r.default.createElement("div",null,r.default.createElement(c.Typography,{variant:"headline"},"Subscribed Applications"),r.default.createElement(c.Typography,{variant:"caption"},"("," ",S.length," ",1===S.length?"subscription":"subscriptions"," ",")")),d.length>0&&r.default.createElement("div",null,r.default.createElement(s.default,{variant:"outlined",size:"small",color:"primary",className:a.buttonElm,onClick:function(){return e.handleClickToggle("openAvailable")}},"Subscribe to Available App"),r.default.createElement(c.Typography,{variant:"caption",component:"p",className:a.buttonElmText},d.length," ","Available")),r.default.createElement(s.default,{variant:"outlined",size:"small",color:"primary",className:a.buttonElm,onClick:function(){return e.handleClickToggle("openNew")}},"Subscribe to New App"),r.default.createElement(s.default,{variant:"outlined",size:"small",color:"primary",className:a.buttonElm,onClick:function(){return e.handleClickToggle("openExpress")}},"Express Mode")),r.default.createElement("table",{className:a.tableMain},r.default.createElement("tr",null,r.default.createElement("th",{className:a.th},"Application Name"),r.default.createElement("th",{className:a.th},"Throttling Tier"),r.default.createElement("th",{className:a.th})),S.map(function(t,l){return r.default.createElement(r.default.Fragment,null,r.default.createElement("tr",{style:{backgroundColor:l%2?"":"#ffffff"}},r.default.createElement("td",{className:a.td},t.label),r.default.createElement("td",{className:a.td},t.policy),r.default.createElement("td",{className:a.td},r.default.createElement("div",{className:a.actionColumn},r.default.createElement(i.Link,{className:a.button,to:"/applications/"+t.value},r.default.createElement("span",null,"MANAGE APP"),r.default.createElement(v.default,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"applications"})),r.default.createElement("a",{className:a.button,onClick:function(){return e.handleSubscriptionDelete(t.subscriptionId,A)}},r.default.createElement("span",null,"UNSUBSCRIBE"),r.default.createElement(v.default,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"subscriptions"})),r.default.createElement("a",{className:(0,y.default)(a.button,x({},a.activeLink,u&&"PRODUCTION"===o&&t.value===u)),onClick:function(){return e.loadInfo("PRODUCTION",t.value)}},r.default.createElement("span",null,"PROD KEYS"),r.default.createElement(v.default,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"productionkeys"})),r.default.createElement("a",{className:(0,y.default)(a.button,x({},a.activeLink,u&&"SANDBOX"===o&&t.value===u)),onClick:function(){return e.loadInfo("SANDBOX",t.value)}},r.default.createElement("span",null,"SANDBOX KEYS"),r.default.createElement(v.default,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"productionkeys"}))))),t.value===u&&("PRODUCTION"===o||"SANDBOX"===o)&&r.default.createElement("tr",null,r.default.createElement("td",{colSpan:"3"},r.default.createElement("div",{className:a.selectedWrapper},r.default.createElement(E.default,{keyType:o,selectedApp:{appId:t.value,label:t.label},updateSubscriptionData:A})))))})),d.length>0&&r.default.createElement(p.default,{fullScreen:!0,open:e.state.openAvailable,onClose:function(){return e.handleClickToggle("openAvailable",A)},TransitionComponent:_}," ",r.default.createElement(f.default,{className:a.appBar},r.default.createElement(g.default,{container:!0,spacing:0},r.default.createElement(g.default,{item:!0,xs:6},r.default.createElement(m.default,{className:a.toolbar},r.default.createElement(h.default,{color:"inherit",onClick:function(){return e.handleClickToggle("openAvailable",A)},"aria-label":"Close"},r.default.createElement(b.default,null)),r.default.createElement("div",{className:a.subscribeTitle},r.default.createElement(c.Typography,{variant:"h6"},"Subscribe"," ",l.name," ","to"," ",1===d.length?"an available application":"available applications","."),r.default.createElement(c.Typography,{variant:"caption"},"(",d.length," ","Applications )")),r.default.createElement(s.default,{variant:"contained",color:"primary",className:a.button,onClick:function(){return e.handleSubscribe(A)}},"Subscribe"))))),r.default.createElement("div",{className:a.plainContent},r.default.createElement(C.default,{innerRef:function(t){e.subscribeToApi=t},api:l,applicationsAvailable:d,rootClass:a.subscribeRoot}))),r.default.createElement(p.default,{fullScreen:!0,open:e.state.openNew,onClose:function(){return e.handleClickToggle("openNew",A)},TransitionComponent:_}," ",r.default.createElement(f.default,{className:a.appBar},r.default.createElement(g.default,{container:!0,spacing:0},r.default.createElement(g.default,{item:!0,xs:6},r.default.createElement(m.default,{className:a.toolbar},r.default.createElement(h.default,{color:"inherit",onClick:function(){return e.handleClickToggle("openNew",A)},"aria-label":"Close"},r.default.createElement(b.default,null)),r.default.createElement("div",{className:a.subscribeTitle},r.default.createElement(c.Typography,{variant:"h6"},"Subscribe to new Application")))))),r.default.createElement("div",{className:a.plainContent},r.default.createElement(k.default,{apiId:l.id,onClickFunction:function(t,a){return e.handleClickToggle(t,a)},updateSubscriptionData:A}))),r.default.createElement(p.default,{fullScreen:!0,open:e.state.openExpress,onClose:function(){return e.handleClickToggle("openExpress",A)},TransitionComponent:_},r.default.createElement(f.default,{className:a.appBar},r.default.createElement(g.default,{container:!0,spacing:0},r.default.createElement(g.default,{item:!0,xs:6},r.default.createElement(m.default,{className:a.toolbar},r.default.createElement(h.default,{color:"inherit",onClick:function(){return e.handleClickToggle("openExpress",A)},"aria-label":"Close"},r.default.createElement(b.default,null)),r.default.createElement("div",{className:a.subscribeTitle},r.default.createElement(c.Typography,{variant:"h6"},"Express Mode")))))),r.default.createElement("div",{className:a.plainContent},r.default.createElement(T.default,{api:l})))),e.state.wizardOn&&r.default.createElement(k.default,null))})}}]),t}();P.propTypes={classes:o.default.object.isRequired},t.default=(0,u.withStyles)(function(e){return{contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:3*e.spacing.unit,paddingTop:3*e.spacing.unit},titleSub:{cursor:"pointer"},button:{padding:e.spacing.unit,color:e.palette.getContrastText(e.palette.background.default),display:"flex",alignItems:"center",fontSize:"11px",cursor:"pointer","& span":{paddingLeft:6,display:"inline-block"}},tableMain:{width:"100%",borderCollapse:"collapse",marginTop:3*e.spacing.unit},actionColumn:{display:"flex",textAlign:"right",direction:"rtl"},td:{color:e.palette.getContrastText(e.palette.background.default),borderBottom:"solid 1px "+e.palette.grey.A200,fontSize:"11px",paddingLeft:e.spacing.unit},th:{color:e.palette.getContrastText(e.palette.background.default),borderBottom:"solid 1px "+e.palette.grey.A200,borderTop:"solid 1px "+e.palette.grey.A200,textAlign:"left",fontSize:"11px",paddingLeft:e.spacing.unit,paddingTop:e.spacing.unit,paddingBottom:e.spacing.unit},expansion:{background:"transparent",boxShadow:"none"},summary:{alignItems:"center"},subscribeButtons:{display:"flex",paddingTop:2*e.spacing.unit},buttonElm:{height:28,marginLeft:20},buttonElmText:{marginLeft:20},appBar:{background:e.palette.background.paper,color:e.palette.getContrastText(e.palette.background.paper)},subscribeTitle:{flex:1},plainContent:{paddingTop:80,paddingLeft:2*e.spacing.unit},toolbar:{marginLeft:2*e.spacing.unit},subscribeRoot:{paddingLeft:2*e.spacing.unit},activeLink:{background:e.palette.grey.A100},selectedWrapper:{background:e.palette.grey.A100,borderLeft:"solid 2px "+e.palette.primary.main}}},{withTheme:!0})(P)},6253:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=a(0),r=b(l),i=b(a(62)),o=b(a(52)),u=b(a(28)),c=b(a(43)),s=b(a(64)),p=b(a(53)),d=a(15),f=b(a(3)),m=b(a(114)),h=b(a(37));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.handleChange=function(e){var t,n,l;a.setState((t={},n=e.target.name,l=e.target.value,n in t?Object.defineProperty(t,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[n]=l,t))},a.state={appSelected:null,tierSelected:null},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Component),n(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.newApp,a=e.applicationsAvailable,n=e.api;this.state.appSelected=t?this.props.newApp.value:a[0].value,this.state.tiers=this.getTiers(n),this.state.tiers.length>0&&this.setState({tierSelected:this.state.tiers[0].value})}},{key:"getTiers",value:function(e){var t=[];if(e&&e.tiers)for(var a=e.tiers,n=0;n<a.length;n++){var l=a[n];t.push({value:l,label:l})}return t}},{key:"createSubscription",value:function(){var e=this.props.api.id,t=this.state.appSelected,a=this.state.tierSelected;return(new h.default).subscribe(e,t,a)}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.applicationsAvailable,l=t.newApp,d=t.rootClass;return l&&n.push(l),r.default.createElement(u.default,{container:!0,spacing:24,className:d},r.default.createElement(u.default,{item:!0,xs:12,md:6},this.state.appSelected&&r.default.createElement(o.default,{className:a.FormControl,disabled:this.props.newApp},r.default.createElement(s.default,{shrink:!0,htmlFor:"age-label-placeholder",className:a.quotaHelp},"Application"),r.default.createElement(p.default,{value:this.state.appSelected,onChange:this.handleChange,input:r.default.createElement(c.default,{name:"appSelected",id:"app-label-placeholder"}),displayEmpty:!0,name:"appSelected",className:a.selectEmpty},n.map(function(e){return r.default.createElement(i.default,{value:e.value,key:e.value},e.label)})),r.default.createElement(m.default,null,"Select an Application to subscribe")),this.state.tiers&&r.default.createElement(o.default,{className:a.FormControlOdd},r.default.createElement(s.default,{shrink:!0,htmlFor:"tier-label-placeholder",className:a.quotaHelp},"Throttling Tier"),r.default.createElement(p.default,{value:this.state.tierSelected,onChange:this.handleChange,input:r.default.createElement(c.default,{name:"tierSelected",id:"tier-label-placeholder"}),displayEmpty:!0,name:"tierSelected",className:a.selectEmpty},this.state.tiers.map(function(e){return r.default.createElement(i.default,{value:e.value,key:e.value},e.label)})),r.default.createElement(m.default,null,"Available Tiers -"," ",this.state.tiers.map(function(t,a){return r.default.createElement("span",{key:t.value},t.label,a!==e.state.tiers.length-1&&r.default.createElement("span",null,","))})))))}}]),t}();g.propTypes={classes:f.default.object.isRequired},t.default=(0,d.withStyles)(function(e){return{titleBar:{display:"flex",justifyContent:"space-between",borderBottomWidth:"1px",borderBottomStyle:"solid",borderColor:e.palette.text.secondary,marginBottom:20},buttonLeft:{alignSelf:"flex-start",display:"flex"},buttonRight:{alignSelf:"flex-end",display:"flex",marginLeft:20},title:{display:"inline-block",marginLeft:20},buttonsWrapper:{marginTop:40},legend:{marginBottom:0,borderBottomStyle:"none",marginTop:20,fontSize:12},inputText:{marginTop:20},buttonRightLink:{textDecoration:"none"},FormControl:{padding:2*e.spacing.unit,width:"100%"},FormControlOdd:{padding:2*e.spacing.unit,backgroundColor:e.palette.background.paper,width:"100%"},quotaHelp:{position:"relative"}}})(g)},6839:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},l=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),r=w(a(0)),i=a(24),o=w(a(3)),u=a(15),c=w(a(317)),s=w(a(316)),p=w(a(206)),d=w(a(23)),f=w(a(16)),m=w(a(319)),h=w(a(318)),b=w(a(5629)),g=w(a(6253)),y=w(a(5634)),v=w(a(5663)),E=w(a(5664)),C=w(a(139)),S=a(5627),k=w(a(193));function w(e){return e&&e.__esModule?e:{default:e}}var T=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={value:"wizard",activeStep:0,appId:null,tab:0,redirect:!1,keyRequest:{keyType:"PRODUCTION",supportedGrantTypes:["client_credentials"],callbackUrl:"https://wso2.am.com"}},a.handleTabChange=function(e,t){a.setState({tab:t})},a.isStepOptional=function(e){return 1===e},a.handleNext=function(){var e=a.state.activeStep,t=a;if(0===e){var n=a.applicationCreate.handleSubmit();n&&n.then(function(a){var n=JSON.parse(a.data);t.newApp={value:n.applicationId,label:n.name},t.setState({activeStep:e+1}),console.log("Application created successfully.")}).catch(function(e){var t=e.response;if(t&&t.body){var a=t.body.description||"Error while creating the application";k.default.error(a)}else k.default.error(e.message);console.error("Error while creating the application")})}else if(1===e){var l=a.subscribeToApi.createSubscription();l&&l.then(function(a){console.log("Subscription created successfully with ID : "+a.body.subscriptionId),t.setState({activeStep:e+1})}).catch(function(e){console.log("Error while creating the subscription."),console.error(e)})}else if(2===e){var r=a.state.keyRequest;C.default.get(a.newApp.value).then(function(e){return e.generateKeys(r.keyType,r.supportedGrantTypes,r.callbackUrl)}).then(function(a){console.log("Keys generated successfully with ID : "+a),t.setState({activeStep:e+1})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})}else if(3===e){a.tokens.generateToken().then(function(a){console.log("token generated successfully : ",a),t.token=a,t.setState({activeStep:e+1})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})}else if(4===e){var i=a.props,o=i.onClickFunction,u=i.updateSubscriptionData;o&&o("openNew",u)}},a.handleBack=function(){var e=a.state.activeStep;a.setState({activeStep:e-1})},a.handleReset=function(){a.setState({activeStep:0})},a.handleChange=function(e){a.setState({value:e.target.value})},a.getStepContent=a.getStepContent.bind(a),a.handleNext=a.handleNext.bind(a),a.handleRedirectTest=a.handleRedirectTest.bind(a),a.updateKeyRequest=a.updateKeyRequest.bind(a),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),l(t,[{key:"getStepContent",value:function(e,t,a){var n=this,l=this.state,i=l.tab,o=l.keyRequest;switch(e){case 0:return r.default.createElement(b.default,{innerRef:function(e){return n.applicationCreate=e}});case 1:return r.default.createElement(g.default,{innerRef:function(e){return n.subscribeToApi=e},newApp:this.newApp,api:t,applicationsAvailable:a});case 2:return r.default.createElement(r.default.Fragment,null,r.default.createElement(m.default,{value:i,onChange:this.handleTabChange,fullWidth:!0,indicatorColor:"secondary",textColor:"secondary"},r.default.createElement(h.default,{label:"PRODUCTION"}),r.default.createElement(h.default,{label:"SANDBOX"})),0===i&&r.default.createElement("div",null,r.default.createElement(y.default,{updateKeyRequest:this.updateKeyRequest,keyRequest:o,selectedApp:this.newApp,keyType:"PRODUCTION"})),1===i&&r.default.createElement("div",null,r.default.createElement(y.default,{updateKeyRequest:this.updateKeyRequest,keyRequest:o,selectedApp:this.newApp,keyType:"SANDBOX"})));case 3:return r.default.createElement(r.default.Fragment,null,r.default.createElement(m.default,{value:i,fullWidth:!0,indicatorColor:"secondary",textColor:"secondary"},r.default.createElement(h.default,{label:"PRODUCTION"}),r.default.createElement(h.default,{label:"SANDBOX"})),0===i&&r.default.createElement("div",null,r.default.createElement(v.default,{innerRef:function(e){return n.tokens=e},selectedApp:this.newApp,keyType:"PRODUCTION"})),1===i&&r.default.createElement("div",null,r.default.createElement(v.default,{innerRef:function(e){return n.tokens=e},selectedApp:this.newApp,keyType:"SANDBOX"})));case 4:return r.default.createElement(E.default,{token:this.token});default:return"Unknown step"}}},{key:"updateKeyRequest",value:function(e){this.setState({keyRequest:e})}},{key:"handleRedirectTest",value:function(){this.setState({redirect:!0})}},{key:"render",value:function(){var e=this;if(this.state.redirect){var t=this.props.apiId;return r.default.createElement(i.Redirect,{push:!0,to:"/apis/"+t+"/test"})}var a=this.props.classes,l=["Create application","Subscribe to new application","Generate Keys","Generate Access Token","Copy Access Token"],o=this.state.activeStep;return r.default.createElement(S.ApiContext.Consumer,null,function(t){var i=t.api,u=t.applicationsAvailable;return r.default.createElement("div",{className:a.root},r.default.createElement("div",null,r.default.createElement(c.default,{activeStep:o},l.map(function(e,t){return r.default.createElement(s.default,n({key:e},{}),r.default.createElement(p.default,{},e))})),r.default.createElement("div",null,o===l.length?r.default.createElement("div",null,r.default.createElement(f.default,{className:a.instructions},'All steps completed - you"re finished'),r.default.createElement(d.default,{onClick:e.handleReset,className:a.button},"Reset")):r.default.createElement("div",{className:a.wizardContent},e.getStepContent(o,i,u),r.default.createElement("div",{className:a.wizardButtons},r.default.createElement(d.default,{disabled:0===o,onClick:e.handleBack,className:a.button,variant:"outlined"},"Back"),r.default.createElement(d.default,{disabled:o<l.length-1,onClick:e.handleRedirectTest,className:a.button,variant:"outlined"},"Test"),r.default.createElement(d.default,{variant:"contained",color:"primary",onClick:function(){return e.handleNext()},className:a.button},o===l.length-1?"Finish":"Next"))))))})}}]),t}();T.propTypes={classes:o.default.object.isRequired},t.default=(0,u.withStyles)(function(e){return{group:{display:"flex",flexDirection:"row"},instructions:{marginTop:e.spacing.unit,marginBottom:e.spacing.unit},root:{paddingLeft:e.spacing.unit},wizardContent:{paddingLeft:e.spacing.unit},button:{marginTop:2*e.spacing.unit,marginRight:e.spacing.unit},wizardButtons:{paddingLeft:2*e.spacing.unit}}})(T)},6840:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),l=a(0),r=v(l),i=v(a(28)),o=v(a(16)),u=a(15),c=v(a(3)),s=v(a(313)),p=v(a(23)),d=v(a(193)),f=v(a(37)),m=v(a(139)),h=v(a(5629)),b=v(a(6253)),g=v(a(5634)),y=a(5627);function v(e){return e&&e.__esModule?e:{default:e}}var E=new f.default,C=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.generateCredentials=function(){var e=a.props.api,t=a.state,n=t.name,l=t.quota,r=t.description,i=t.supportedGrantTypes,o=t.callbackUrl,u=t.tokenType,c={name:n,throttlingTier:l,description:r};E.createApplication(c).then(function(t){var a=JSON.parse(t.data);console.log("Application created successfully.",a,e),m.default.get(a.applicationId).generateKeys("SANDBOX",i,o,u).then(function(e){console.info(e)}).catch(function(e){console.info(e)})}).catch(function(){d.default.error("Application already exists."),console.log("Error while creating the application")})},a.state={newApp:null,tiers:null,quota:"Unlimited",appName:null,appDescription:"Auto generated application",apiPolicyName:null,tokenType:"OAUTH",callBackURL:"http://localhost",supportedGrantTypes:["client_credentials"]},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Component),n(t,[{key:"componentDidMount",value:function(){var e=this;E.getAllTiers("application").then(function(t){var a=t.body,n=[];a.list.map(function(e){return n.push(e.name)}),e.setState({tiers:n}),n.length>0&&e.setState({quota:n[0]})}).catch(function(t){404===t.status&&e.setState({notFound:!0})}),this.setState({appName:Math.random().toString(36).substr(2,5)})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.api,l=this.state,u=l.newApp,c=(l.tiers,l.appName),d=(l.appDescription,l.quota,l.tokenType,l.callBackURL,this.state.apiPolicyName),f=[];if(n&&n.policies){for(var m=0;m<n.policies.length;m++){var v=n.policies[m];f.push({value:v,label:v})}f.length>0&&!d&&(d=f[0].value)}return r.default.createElement(y.ApiContext.Consumer,null,function(t){var n=t.api,l=t.applicationsAvailable;return r.default.createElement(i.default,{container:!0,spacing:24,className:a.root},r.default.createElement(i.default,{item:!0,xs:12},r.default.createElement(o.default,{variant:"body1"},"Express mode take you through application creation, key generation, and subscription process with following settings in one go. Click the values to change them to new values."),r.default.createElement(p.default,{variant:"contained",color:"primary",className:a.button,onClick:e.generateCredentials},"Generate Credentials for")),r.default.createElement(i.default,{item:!0,xs:3},r.default.createElement("div",{className:a.arrowTextContainer},r.default.createElement(o.default,{variant:"body1"},"New Application"),r.default.createElement(s.default,null))),r.default.createElement(i.default,{item:!0,xs:3},r.default.createElement("div",{className:a.arrowTextContainer},r.default.createElement(o.default,{variant:"body1"},"Subscribe ",r.default.createElement("strong",null,n.name)," to Application ",r.default.createElement("strong",null,c)),r.default.createElement(s.default,null))),r.default.createElement(i.default,{item:!0,xs:6},r.default.createElement("div",{className:a.arrowTextContainer},r.default.createElement(o.default,{variant:"body1"},"Generate Keys"))),r.default.createElement(i.default,{item:!0,xs:3},r.default.createElement(h.default,{innerRef:function(t){e.applicationCreate=t}})),r.default.createElement(i.default,{item:!0,xs:3},r.default.createElement(b.default,{innerRef:function(t){e.subscribeToApi=t},newApp:u,api:n,applicationsAvailable:l}),";"),r.default.createElement(i.default,{item:!0,xs:6},r.default.createElement(g.default,{innerRef:function(t){e.keys=t},selectedApp:u,keyType:"SANDBOX"})))})}}]),t}();C.propTypes={classes:c.default.object.isRequired},t.default=(0,u.withStyles)(function(e){return{root:{paddingLeft:40,maxWidth:e.custom.contentAreaWidth},arrowTextContainer:{display:"flex",alignItems:"center"},margin:{margin:0},tokenType:{paddingLeft:e.spacing.unit},tableClass:{"& td":{verticalAlign:"middle"}},tableClassOther:{"& td":{verticalAlign:"top"}},descCol:{verticalAlign:"top !important",paddingTop:10},group:{flexDirection:"row"}}})(C)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,