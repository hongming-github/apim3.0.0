(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{6175:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=P(n(0)),a=P(n(28)),s=P(n(16)),u=P(n(3)),l=P(n(38)),i=n(15),c=P(n(29)),p=P(n(115)),f=P(n(201)),d=P(n(202)),h=P(n(76)),m=P(n(21)),y=P(n(203)),b=P(n(43)),g=P(n(64)),v=P(n(62)),E=P(n(52)),w=P(n(53)),k=P(n(320)),S=P(n(37)),I=P(n(6565));function P(e){return e&&e.__esModule?e:{default:e}}var T=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={showToken:!1},n.handleChanges=n.handleChanges.bind(n),n.accessTokenProvider=n.accessTokenProvider.bind(n),n.handleClickShowToken=n.handleClickShowToken.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this,t=new S.default,n=this.props.match.params.api_uuid,r=t.getSwaggerByAPIId(n),o=t.getAPIById(n),a=t.getSubscriptions(n);Promise.all([o,r,a.catch(function(e){return console.error(e)})]).then(function(t){var n=t.map(function(e){return e&&e.body}),r=n[0],o=n[1],a=n[2];o.basePath=r.context,o.host="localhost:8243",e.setState({api:r,swagger:o,subscriptions:a})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"handleClickShowToken",value:function(){var e=this.state.showToken;this.setState({showToken:!e})}},{key:"accessTokenProvider",value:function(){return this.state.accessToken}},{key:"handleChanges",value:function(e){var t=e.currentTarget,n=t.name,r=t.value;this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},n,r))}},{key:"render",value:function(){var e=this.props.classes,t=this.state,n=t.api,r=t.notFound,u=t.swagger,i=t.accessToken,S=t.showToken,P=t.subscriptions,T=h.default.getUser();return null==n||null==u?o.default.createElement(k.default,null):r?"API Not found !":o.default.createElement(o.default.Fragment,null,o.default.createElement(a.default,{container:!0,className:e.grid},!T&&o.default.createElement(a.default,{item:!0,md:6},o.default.createElement(m.default,{className:e.userNotificationPaper},o.default.createElement(s.default,{variant:"h5",component:"h3"},o.default.createElement(y.default,null)," ","Notice"),o.default.createElement(s.default,{component:"p"},"You require an access token to try the API. Please log in and subscribe to the API to generate an access token. If you already have an access token, please provide it below."))),P&&P.list.length>0&&o.default.createElement(a.default,{container:!0},o.default.createElement(a.default,{item:!0,md:3},o.default.createElement(s.default,{variant:"subheading",gutterleft:!0},"Select Application")),o.default.createElement(a.default,{item:!0,md:9},o.default.createElement(E.default,{className:e.formControl},o.default.createElement(g.default,{htmlFor:"subscriptions-selection"},"Subscribed applications"),o.default.createElement(w.default,{autoWidth:!0,name:"selectedSubscribedApplication",value:P.list[0].applicationInfo.applicationId,onChange:this.handleChanges,input:o.default.createElement(b.default,{name:"subscription",id:"subscriptions-selection"})},P.list.map(function(e){return o.default.createElement(v.default,{value:e.applicationInfo.applicationId},e.applicationInfo.name)}))))),o.default.createElement(a.default,{container:!0},o.default.createElement(a.default,{item:!0,md:3},o.default.createElement(s.default,{variant:"subheading",gutterleft:!0},"Set Request Header")),o.default.createElement(a.default,{item:!0,md:9},o.default.createElement(l.default,{margin:"normal",variant:"outlined",className:e.inputText,label:"Access Token",name:"accessToken",onChange:this.handleChanges,type:S?"text":"password",value:i,helperText:"Enter access token",InputProps:{endAdornment:o.default.createElement(p.default,{position:"end"},o.default.createElement(c.default,{edge:"end","aria-label":"Toggle token visibility",onClick:this.handleClickShowToken},S?o.default.createElement(d.default,null):o.default.createElement(f.default,null))),startAdornment:o.default.createElement(p.default,{className:e.inputAdornmentStart,position:"start"},n.authorizationHeader?n.authorizationHeader:"Authorization"," ",":Bearer")}})))),o.default.createElement(I.default,{accessTokenProvider:this.accessTokenProvider,spec:u}))}}]),t}();T.defaultProps={},T.propTypes={classes:u.default.shape({}).isRequired},t.default=(0,i.withStyles)({inputAdornmentStart:{width:"100%"},inputText:{marginLeft:"40px",minWidth:"400px"},grid:{spacing:20,marginTop:"30px",marginBottom:"30px",paddingLeft:"90px"},userNotificationPaper:{padding:"20px"}})(T)},6565:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),o=s(n(3));n(6566);var a=s(n(6568));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){return{wrapComponents:{authorizeBtn:function(){return function(){return null}},info:function(){return function(){return null}}}}},l=function(e){var t=e.spec,n=e.accessTokenProvider,o={spec:t,validatorUrl:null,docExpansion:"list",defaultModelsExpandDepth:0,requestInterceptor:function(e){return e.headers.Authorization="Bearer "+n(),e},presets:[u],plugins:null};return r.default.createElement(a.default,o)};l.propTypes={spec:o.default.shape({}).isRequired},t.default=l},6568:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=i(n(0)),s=i(n(3)),u=n(6569),l=i(u);function i(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.requestInterceptor=function(e){return"function"==typeof n.props.requestInterceptor?n.props.requestInterceptor(e):e},n.responseInterceptor=function(e){return"function"==typeof n.props.responseInterceptor?n.props.responseInterceptor(e):e},n.onComplete=function(){if("function"==typeof n.props.onComplete)return n.props.onComplete(n.system)},n.SwaggerUIComponent=null,n.system=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){var e=(0,l.default)({spec:this.props.spec,url:this.props.url,defaultModelsExpandDepth:this.props.defaultModelsExpandDepth,presets:[u.presets.apis].concat(c(this.props.presets)),requestInterceptor:this.requestInterceptor,responseInterceptor:this.responseInterceptor,onComplete:this.onComplete,docExpansion:this.props.docExpansion});this.system=e,this.SwaggerUIComponent=e.getComponent("App","root"),this.forceUpdate()}},{key:"componentDidUpdate",value:function(e){this.props.url!==e.url&&(this.system.specActions.updateSpec(""),this.props.url&&(this.system.specActions.updateUrl(this.props.url),this.system.specActions.download(this.props.url))),this.props.spec!==e.spec&&this.props.spec&&("object"===r(this.props.spec)?this.system.specActions.updateSpec(JSON.stringify(this.props.spec)):this.system.specActions.updateSpec(this.props.spec))}},{key:"render",value:function(){return this.SwaggerUIComponent?a.default.createElement(this.SwaggerUIComponent,null):null}}]),t}();t.default=p,p.defaultProps={docExpansion:"list",defaultModelsExpandDepth:1,presets:[]},p.propTypes={spec:s.default.oneOf([s.default.string,s.default.object]),url:s.default.string,defaultModelsExpandDepth:s.default.number,requestInterceptor:s.default.func,responseInterceptor:s.default.func,onComplete:s.default.func,docExpansion:s.default.oneOf(["list","full","none"]),presets:s.default.arrayOf(s.default.func)}},6679:function(e,t){},6681:function(e,t){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,