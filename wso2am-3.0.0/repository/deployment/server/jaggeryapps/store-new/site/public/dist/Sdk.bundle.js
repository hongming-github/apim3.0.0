(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{6172:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=w(n(0)),r=w(n(23)),i=w(n(140)),u=w(n(141)),o=w(n(305)),s=w(n(195)),d=w(n(303)),c=w(n(28)),f=w(n(196)),m=w(n(6213)),g=w(n(21)),h=w(n(38)),p=w(n(16)),b=w(n(37));function w(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));y.call(n),n.state={sdkLanguages:null,items:null};var a=n.props,l=a.match,r=a.apiId;return n.api_uuid=l?l.params.api_uuid:r,n.filter_threshold=5,n.getSdkForApi=n.getSdkForApi.bind(n),n.handleClick=n.handleClick.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"componentDidMount",value:function(){var e=this;(new b.default).getSdkLanguages().then(function(t){0!=t.obj.length?(e.setState({sdkLanguages:t.obj}),e.setState({items:t.obj})):e.setState({sdkLanguages:!1})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"getSdkForApi",value:function(e,t){var n=this;(new b.default).getSdk(e,t).then(function(e){var t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],n=e.data;(0,m.default)(n,t)}).catch(function(e){var t=e.status;404===t?n.setState({notFound:!0}):400===t?n.setState({badRequest:!0}):500===t&&n.setState({serverError:!0})})}},{key:"render",value:function(){var e=this,t=this.state.items;return this.props.onlyIcons?t&&l.default.createElement(l.default.Fragment,null,t.map(function(t,n){return n<3&&l.default.createElement(c.default,{item:!0,xs:4},l.default.createElement("a",{onClick:function(n){return e.handleClick(n,t)},style:{cursor:"pointer"}},l.default.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:80,height:80,margin:15}})))})):t?l.default.createElement(c.default,{container:!0,className:"tab-grid",spacing:0},l.default.createElement(c.default,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&l.default.createElement(c.default,{item:!0,style:{textAlign:"center"}},l.default.createElement(h.default,{id:"search",label:"Search SDK",type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),l.default.createElement(c.default,{container:!0,justify:"flex-start",spacing:Number(24)},t.map(function(t,n){return l.default.createElement(c.default,{key:n,item:!0},l.default.createElement("div",{style:{width:"auto",textAlign:"center"}},l.default.createElement(i.default,null,l.default.createElement("div",null,t.toString().toUpperCase()),l.default.createElement(s.default,null),l.default.createElement(o.default,{title:t.toString().toUpperCase(),src:"/store-new/site/public/images/sdks/"+new String(t)+".svg"},l.default.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:"100px",height:"100px",margin:"15px"}})),l.default.createElement(u.default,null,l.default.createElement(c.default,{container:!0,justify:"center"},l.default.createElement(r.default,{color:"secondary",onClick:function(n){return e.handleClick(n,t)}},l.default.createElement(d.default,null),"Download"))))))})))):l.default.createElement(g.default,null,l.default.createElement(c.default,{container:!0,style:{marginLeft:"10%",marginRight:"10%",width:"100%"},align:"center"},l.default.createElement(c.default,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},l.default.createElement(g.default,null,l.default.createElement(p.default,null,l.default.createElement(f.default,null),"No languages are configured.")))))}}]),t}(),y=function(){var e=this;this.handleClick=function(t,n){var a=e.api_uuid,l=n;e.getSdkForApi(a,l)},this.handleChange=function(t){var n=e.state.sdkLanguages;n=n.filter(function(e){return-1!==e.toLowerCase().search(t.target.value.toLowerCase())}),e.setState({items:n})}};t.default=v},6213:function(e,t){e.exports=function(e,t,n,a){var l=new Blob(void 0!==a?[a,e]:[e],{type:n||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(l,t);else{var r=window.URL.createObjectURL(l),i=document.createElement("a");i.style.display="none",i.href=r,i.setAttribute("download",t),void 0===i.download&&i.setAttribute("target","_blank"),document.body.appendChild(i),i.click(),document.body.removeChild(i),window.URL.revokeObjectURL(r)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,