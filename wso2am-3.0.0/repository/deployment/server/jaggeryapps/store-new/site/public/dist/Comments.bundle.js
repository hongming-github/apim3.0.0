(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{6173:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(0),l=C(o),r=C(n(3)),i=n(15),c=C(n(312)),m=C(n(311)),u=n(110),s=C(n(5633)),d=C(n(193)),f=C(n(6836)),p=C(n(6556)),h=C(n(37)),g=n(5627);function C(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={expanded:!0,allComments:[],comments:[],totalComments:0,startCommentsToDisplay:0},n.updateCommentList=n.updateCommentList.bind(n),n.handleExpandClick=n.handleExpandClick.bind(n),n.handleLoadMoreComments=n.handleLoadMoreComments.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),a(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props,n=t.apiId,a=t.theme,o=t.match;o&&(n=o.params.api_uuid),(new h.default).getAllComments(n).then(function(t){var n=t.body.list;e.setState({allComments:n,totalComments:n.length}),n.length<a.custom.commentsLimit?e.setState({startCommentsToDisplay:0,comments:n.slice(0,n.length)}):e.setState({startCommentsToDisplay:n.length-a.custom.commentsLimit,comments:n.slice(n.length-a.custom.commentsLimit,n.length)})}).catch(function(e){console.error(e),e.response?d.default.error(e.response.body.message):d.default.error("Something went wrong while retrieving comments")})}},{key:"handleLoadMoreComments",value:function(){var e=this.state,t=e.totalComments,n=e.startCommentsToDisplay,a=e.allComments,o=this.props.theme;n-o.custom.commentsLimit<=0?this.setState({startCommentsToDisplay:0,comments:a.slice(0,t)}):this.setState({startCommentsToDisplay:n-o.custom.commentsLimit,comments:a.slice(n-o.custom.commentsLimit,t)})}},{key:"handleExpandClick",value:function(){var e=this.state.expanded;this.setState({expanded:!e})}},{key:"updateCommentList",value:function(e){var t=this.state,n=t.startCommentsToDisplay,a=t.totalComments,o=this.props.theme,l=void 0,r=void 0,i=void 0;this.setState({allComments:e}),a<o.custom.commentsLimit?(i=e.length,this.setState({startCommentsToDisplay:0,totalComments:i,comments:e})):a<=e.length?(l=n+(r=e.length-a),i=e.length,this.setState({startCommentsToDisplay:l,totalComments:i,comments:e.slice(l,i)})):(r=a-e.length,l=0===n?n:n-r,i=e.length,this.setState({startCommentsToDisplay:l,totalComments:i,comments:e.slice(l,i)}))}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.showLatest,o=this.state,r=o.comments,i=o.expanded,d=o.allComments,h=o.startCommentsToDisplay,C=o.totalComments;return l.default.createElement(g.ApiContext.Consumer,null,function(t){var o=t.api;return l.default.createElement("div",{className:n.contentWrapper},!a&&l.default.createElement("div",{className:n.root},l.default.createElement(c.default,{onClick:e.handleExpandClick,"aria-expanded":i}),l.default.createElement(u.Typography,{onClick:e.handleExpandClick,variant:"display1",className:n.titleSub},"Comments")),!a&&l.default.createElement(p.default,{apiId:o.id,commentsUpdate:e.updateCommentList,allComments:d,parentCommentId:null,cancelButton:!1}),l.default.createElement(f.default,{comments:r,apiId:o.id,commentsUpdate:e.updateCommentList,allComments:d}),0!==h&&l.default.createElement("div",{className:n.contentWrapper},l.default.createElement(s.default,{container:!0,spacing:32,className:n.root},l.default.createElement(s.default,{item:!0},l.default.createElement(u.Typography,{className:n.verticalSpace,variant:"body2"},l.default.createElement("a",{className:n.link+" "+n.loadMoreLink,onClick:e.handleLoadMoreComments},"Load Previous Comments"))),l.default.createElement(s.default,null,l.default.createElement(m.default,{onClick:e.handleLoadMoreComments,className:n.link+" "+n.verticalSpace})),l.default.createElement(s.default,{item:!0},l.default.createElement(u.Typography,{className:n.verticalSpace,variant:"body2"},"Showing comments"," ",C-h+" of "+C)))))})}}]),t}();y.contextType=g.ApiContext,y.propTypes={classes:r.default.instanceOf(Object).isRequired},t.default=(0,i.withStyles)(function(e){return{root:{display:"flex",alignItems:"center",paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig},titleSub:{cursor:"pointer"},link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},verticalSpace:{marginTop:.2*e.spacing.unit},loadMoreLink:{textDecoration:"underline"}}},{withTheme:!0})(y)},6555:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=c(n(0)),l=n(110),r=c(n(23)),i=c(n(3));function c(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"handleRequestClose",value:function(e){var n=this.props.callback;e===t.Action.OK?n(!0):n(!1)}},{key:"render",value:function(){var e=this,n=this.props,a=n.title,i=n.message,c=n.labelCancel,m=n.labelOk,u=n.open;return o.default.createElement(l.Dialog,{open:u,onClose:this.handleRequestClose},o.default.createElement(l.DialogTitle,null,a||"Please Confirm"),o.default.createElement(l.DialogContent,null,o.default.createElement(l.DialogContentText,null,i||"Are you sure?")),o.default.createElement(l.DialogActions,null,o.default.createElement(r.default,{onClick:function(){return e.handleRequestClose(t.Action.CANCEL)},color:"primary"},c||"Cancel"),o.default.createElement(r.default,{onClick:function(){return e.handleRequestClose(t.Action.OK)},color:"primary"},m||"OK")))}}]),t}();m.propTypes={title:i.default.string.isRequired,message:i.default.string.isRequired,labelCancel:i.default.string.isRequired,labelOk:i.default.string.isRequired,callback:i.default.func.isRequired,open:i.default.bool.isRequired},m.Action={OK:"ok",CANCEL:"cancel"},t.default=m},6556:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=p(n(0)),l=p(n(3)),r=n(15),i=n(110),c=p(n(28)),m=p(n(52)),u=p(n(62)),s=p(n(53)),d=p(n(193)),f=p(n(37));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={commentText:"",category:"General",currentLength:0},n.inputChange=n.inputChange.bind(n),n.handleClickAddComment=n.handleClickAddComment.bind(n),n.handleClickCancel=n.handleClickCancel.bind(n),n.handleCategoryChange=n.handleCategoryChange.bind(n),n.filterCommentToAddReply=n.filterCommentToAddReply.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"inputChange",value:function(e){var t=e.target;this.setState({commentText:t.value,currentLength:t.value.length})}},{key:"handleClickCancel",value:function(){(0,this.props.toggleShowReply)()}},{key:"handleCategoryChange",value:function(e){this.setState({category:e.target.value})}},{key:"filterCommentToAddReply",value:function(e){var t=this.props.parentCommentId;return e.commentId===t}},{key:"handleClickAddComment",value:function(){var e=this,t=this.props,n=t.apiId,a=t.parentCommentId,o=t.allComments,l=t.toggleShowReply,r=t.commentsUpdate,i=this.state,c=i.category,m=i.commentText,u=new f.default,s={apiId:n,category:c,commentText:m.trim(),parentCommentId:a};s.commentText.replace(/\s/g,"").length?u.addComment(n,s).then(function(t){e.setState({commentText:"",category:"General"});var n=t.body;if(null===a)o.push(n);else{var i=o.findIndex(e.filterCommentToAddReply);o[i].replies.push(n),l()}r(o)}).catch(function(e){console.error(e),e.response?d.default.error(e.response.body.message):d.default.error("Something went wrong while adding the comment")}):d.default.error("You cannot enter a blank comment"),this.setState({currentLength:0})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.cancelButton,l=t.theme,r=this.state,d=r.category,f=r.commentText,p=r.currentLength;return o.default.createElement(c.default,{container:!0,spacing:24,className:n.contentWrapper},o.default.createElement(c.default,{item:!0,xs:!0,zeroMinWidth:!0},o.default.createElement(m.default,{className:n.category},o.default.createElement(s.default,{value:d,onChange:this.handleCategoryChange},o.default.createElement(u.default,{value:"General"},"General"),o.default.createElement(u.default,{value:"Feature Request"},"Feature Request"),o.default.createElement(u.default,{value:"Bug Report"},"Bug Report"))),o.default.createElement(i.TextField,{id:"standard-multiline-flexible",autoFocus:!0,multiline:!0,className:n.textField,margin:"normal",placeholder:"Write a comment",inputProps:{maxLength:l.custom.maxCommentLength},value:f,onChange:this.inputChange}),o.default.createElement(i.Typography,{className:n.commentText,align:"right"},p+"/"+l.custom.maxCommentLength),o.default.createElement(c.default,{container:!0,spacing:8},o.default.createElement(c.default,{item:!0},o.default.createElement(i.Button,{variant:"contained",color:"primary",onClick:function(){return e.handleClickAddComment()}},"Add Comment")),a&&o.default.createElement(c.default,{item:!0},o.default.createElement(i.Button,{onClick:function(){return e.handleClickCancel()},className:n.button},"Cancel")))))}}]),t}();h.defaultProps={parentCommentId:null,toggleShowReply:null,commentsUpdate:null},h.propTypes={classes:l.default.instanceOf(Object).isRequired,cancelButton:l.default.bool.isRequired,apiId:l.default.string.isRequired,parentCommentId:l.default.string,toggleShowReply:l.default.func,commentsUpdate:l.default.func,allComments:l.default.instanceOf(Array).isRequired},t.default=(0,r.withStyles)(function(e){return{commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default)},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},textField:{marginTop:0,width:"88%"},category:{width:"12%"}}},{withTheme:!0})(h)},6557:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=p(n(0)),l=p(n(3)),r=n(15),i=n(110),c=p(n(52)),m=p(n(62)),u=p(n(53)),s=p(n(28)),d=p(n(193)),f=p(n(37));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={commentText:"",category:"",currentLength:0},n.inputChange=n.inputChange.bind(n),n.handleCategoryChange=n.handleCategoryChange.bind(n),n.handleClickUpdateComment=n.handleClickUpdateComment.bind(n),n.handleClickCancel=n.handleClickCancel.bind(n),n.filterCommentToUpdate=n.filterCommentToUpdate.bind(n),n.filterCommentToUpdateReply=n.filterCommentToUpdateReply.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"componentDidMount",value:function(){var e=this.props.comment;this.setState({commentText:e.commentText,category:e.category,currentLength:e.commentText.length})}},{key:"inputChange",value:function(e){var t=e.target;this.setState({commentText:t.value,currentLength:t.value.length})}},{key:"handleClickCancel",value:function(){var e=this.props,t=e.toggleShowEdit,n=e.commentsUpdate,a=e.allComments;t(),n(a)}},{key:"handleCategoryChange",value:function(e){this.setState({category:e.target.value})}},{key:"filterCommentToUpdate",value:function(e){var t=this.props.comment;return e.commentId===t.commentId}},{key:"filterCommentToUpdateReply",value:function(e){var t=this.props.comment;return e.commentId===t.parentCommentId}},{key:"handleClickUpdateComment",value:function(){var e=this,t=this.props,n=t.apiId,a=t.comment,o=t.allComments,l=t.toggleShowEdit,r=t.commentsUpdate,i=this.state,c=i.category,m=i.commentText,u=new f.default,s=a;s.commentText=m.trim(),s.category=c,a.commentText.replace(/\s/g,"").length?u.updateComment(n,s.commentId,s).then(function(t){var n=t.body;if(void 0===s.parentCommentId){var a=o.findIndex(e.filterCommentToUpdate);o[a].category=n.category,o[a].commentText=n.commentText}else{var i=o.findIndex(e.filterCommentToUpdateReply),c=o[i].replies.findIndex(e.filterCommentToUpdate);o[i].replies[c]=n}l(),r(o)}).catch(function(e){console.error(e),e.response?d.default.error(e.response.body.message):d.default.error("Something went wrong while adding the comment")}):d.default.error("You cannot enter a blank comment")}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.theme,l=this.state,r=l.category,d=l.commentText,f=l.currentLength;return o.default.createElement("div",null,o.default.createElement(c.default,{className:n.category},o.default.createElement(u.default,{value:r,onChange:this.handleCategoryChange},o.default.createElement(m.default,{value:"General"},"General"),o.default.createElement(m.default,{value:"Feature Request"},"Feature Request"),o.default.createElement(m.default,{value:"Bug Report"},"Bug Report"))),o.default.createElement(i.TextField,{id:"multiline-static",autoFocus:!0,multiline:!0,className:n.textField,margin:"normal",placeholder:"Write a comment",inputProps:{maxLength:a.custom.maxCommentLength},value:d,onChange:this.inputChange}),o.default.createElement(i.Typography,{className:n.commentText,align:"right"},f+"/"+a.custom.maxCommentLength),o.default.createElement(s.default,{container:!0,spacing:8},o.default.createElement(s.default,{item:!0},o.default.createElement(i.Button,{variant:"contained",color:"primary",onClick:function(){return e.handleClickUpdateComment()}},"Save")),o.default.createElement(s.default,{item:!0},o.default.createElement(i.Button,{onClick:function(){return e.handleClickCancel()},className:n.button},"Cancel"))))}}]),t}();h.propTypes={classes:l.default.instanceOf(Object).isRequired,apiId:l.default.string.isRequired,allComments:l.default.instanceOf(Array).isRequired,commentsUpdate:l.default.func.isRequired,toggleShowEdit:l.default.func.isRequired,comment:l.default.instanceOf(Object).isRequired},t.default=(0,r.withStyles)(function(e){return{textField:{marginTop:0,width:"87.5%"},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},category:{width:"12%",marginRight:"0.5%"}}},{withTheme:!0})(h)},6558:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=s(n(0)),l=s(n(3)),r=s(n(5633)),i=n(110),c=n(15),m=s(n(144)),u=s(n(76));function s(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n.showAddComment=n.showAddComment.bind(n),n.showEditComment=n.showEditComment.bind(n),n.handleClickOpen=n.handleClickOpen.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"showAddComment",value:function(e){var t=this.props,n=t.editIndex,a=t.showAddComment;-1===n&&a(e)}},{key:"showEditComment",value:function(e){var t=this.props,n=t.editIndex,a=t.showEditComment;-1===n&&a(e)}},{key:"handleClickOpen",value:function(e){var t=this.props,n=t.editIndex,a=t.handleClickOpen;-1===n&&a(e)}},{key:"displayDate",value:function(e){var t=new Date(e);return t.toLocaleDateString(void 0,{day:"numeric",month:"short",year:"numeric"})+" "+t.toLocaleTimeString(void 0,{hour:"2-digit",minute:"2-digit"})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comment,l=t.editIndex,c=t.index,s=t.theme;return o.default.createElement(r.default,{container:!0,spacing:8,className:n.verticalSpace,key:a.commentId},null==a.parentCommentId&&[o.default.createElement(r.default,{item:!0,key:"key-reply"},o.default.createElement(i.Typography,{component:"a",className:-1===l?n.link:n.disable,onClick:function(){return e.showAddComment(c)}},"Reply")),o.default.createElement(r.default,{item:!0,key:"key-reply-vertical-divider"},o.default.createElement(m.default,{height:15}))],(a.createdBy===u.default.getUser().name||u.default.getUser().name===s.custom.adminRole)&&[o.default.createElement(r.default,{item:!0,key:"key-delete"},o.default.createElement(i.Typography,{component:"a",className:-1===l?n.link:n.disable,onClick:function(){return e.handleClickOpen(a)}},"Delete")),o.default.createElement(r.default,{item:!0,key:"key-delete-vertical-divider"},o.default.createElement(m.default,{height:15}))],a.createdBy===u.default.getUser().name&&"APIStore"===a.entryPoint&&[o.default.createElement(r.default,{item:!0,key:"key-edit"},o.default.createElement(i.Typography,{component:"a",className:-1===l?n.link:n.disable,onClick:function(){return e.showEditComment(c)}},"Edit")),o.default.createElement(r.default,{item:!0,key:"key-edit-verical-divider"},o.default.createElement(m.default,{height:15}))],o.default.createElement(r.default,{item:!0,className:n.time},o.default.createElement(i.Typography,{component:"a",variant:"caption"},this.displayDate(a.createdTime))),l===c?null:[o.default.createElement(r.default,{item:!0,key:"key-category-vertical-divider"},o.default.createElement(m.default,{height:15})),o.default.createElement(r.default,{item:!0,className:n.time,key:"key-category"},o.default.createElement(i.Typography,{component:"a",variant:"caption"},a.category))])}}]),t}();d.defaultProps={showAddComment:null},d.propTypes={classes:l.default.instanceOf(Object).isRequired,editIndex:l.default.number.isRequired,index:l.default.number.isRequired,comment:l.default.instanceOf(Object).isRequired,handleClickOpen:l.default.func.isRequired,showEditComment:l.default.func.isRequired,showAddComment:l.default.func},t.default=(0,c.withStyles)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},time:{color:e.palette.getContrastText(e.palette.background.default),marginTop:.3*e.spacing.unit},verticalSpace:{marginTop:.2*e.spacing.unit},disable:{color:e.custom.disableColor},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}},{withTheme:!0})(d)},6836:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=C(n(0)),l=C(n(3)),r=n(110),i=n(15),c=C(n(302)),m=C(n(28)),u=C(n(193)),s=C(n(6555)),d=C(n(6556)),f=C(n(6557)),p=C(n(6558)),h=C(n(6837)),g=C(n(37));function C(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={openDialog:!1,replyIndex:-1,editIndex:-1,deleteComment:null},n.handleClickDeleteComment=n.handleClickDeleteComment.bind(n),n.handleShowEdit=n.handleShowEdit.bind(n),n.handleShowReply=n.handleShowReply.bind(n),n.handleClickOpen=n.handleClickOpen.bind(n),n.showAddComment=n.showAddComment.bind(n),n.showEditComment=n.showEditComment.bind(n),n.handleConfirmDialog=n.handleConfirmDialog.bind(n),n.handleClose=n.handleClose.bind(n),n.filterRemainingComments=n.filterRemainingComments.bind(n),n.filterCommentToDelete=n.filterCommentToDelete.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"filterRemainingComments",value:function(e){var t=this.state.deleteComment;return e.commentId!==t.commentId}},{key:"filterCommentToDelete",value:function(e){var t=this.state.deleteComment;return e.commentId===t.parentCommentId}},{key:"showAddComment",value:function(e){-1===this.state.editIndex&&this.setState({replyIndex:e})}},{key:"showEditComment",value:function(e){-1===this.state.editIndex&&this.setState({editIndex:e})}},{key:"handleShowEdit",value:function(){this.setState({editIndex:-1})}},{key:"handleShowReply",value:function(){this.setState({replyIndex:-1})}},{key:"handleClickOpen",value:function(e){-1===this.state.editIndex&&this.setState({deleteComment:e,openDialog:!0})}},{key:"handleClose",value:function(){this.setState({openDialog:!1})}},{key:"handleConfirmDialog",value:function(e){e?this.handleClickDeleteComment():this.handleClose()}},{key:"handleClickDeleteComment",value:function(){var e=this,t=new g.default,n=this.state.deleteComment,a=this.props,o=a.apiId,l=a.allComments,r=a.commentsUpdate,i=n.commentId,c=n.parentCommentId;this.handleClose(),t.deleteComment(o,i).then(function(t){if(void 0===c){var n=l.filter(e.filterRemainingComments);r(n)}else{var a=l.findIndex(e.filterCommentToDelete),o=l[a].replies.filter(e.filterRemainingComments);l[a].replies=o,r(l)}}).catch(function(e){console.error(e),e.response?u.default.error(e.response.body.message):u.default.error("Something went wrong while deleting comment - "+i)})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comments,l=t.apiId,i=t.allComments,u=t.commentsUpdate,g=this.state,C=g.editIndex,y=g.replyIndex,b=g.openDialog;return[a&&a.slice(0).reverse().map(function(t,a){return o.default.createElement("div",{key:t.commentId+"-"+a,className:n.contentWrapper},o.default.createElement(m.default,{container:!0,spacing:8,className:n.root},o.default.createElement(m.default,{item:!0},o.default.createElement(c.default,{className:n.commentIcon})),o.default.createElement(m.default,{item:!0,xs:!0,zeroMinWidth:!0},o.default.createElement(r.Typography,{noWrap:!0,className:n.commentText,variant:"body2"},t.createdBy),a!==C&&o.default.createElement(r.Typography,{className:n.commentText},t.commentText),a===C&&o.default.createElement(f.default,{apiId:l,allComments:i,commentsUpdate:u,comment:t,toggleShowEdit:e.handleShowEdit}),o.default.createElement(p.default,{classes:n,comment:t,editIndex:C,index:a,showAddComment:e.showAddComment,handleClickOpen:e.handleClickOpen,showEditComment:e.showEditComment}),a===y&&o.default.createElement(d.default,{apiId:l,parentCommentId:t.commentId,allComments:i,commentsUpdate:u,toggleShowReply:e.handleShowReply,cancelButton:!0}),0!==t.replies.length&&o.default.createElement(h.default,{classes:n,apiId:l,comments:t.replies,commentsUpdate:u,allComments:i}))))}),o.default.createElement(s.default,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:"Are you sure you want to delete this comment?",labelOk:"Yes",callback:this.handleConfirmDialog,open:b})]}}]),t}();y.propTypes={classes:l.default.instanceOf(Object).isRequired,apiId:l.default.string.isRequired,allComments:l.default.instanceOf(Array).isRequired,commentsUpdate:l.default.func.isRequired,comments:l.default.instanceOf(Array).isRequired},t.default=(0,i.withStyles)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}})(y)},6837:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=h(n(0)),l=h(n(3)),r=n(110),i=n(15),c=h(n(302)),m=h(n(28)),u=h(n(193)),s=h(n(6555)),d=h(n(6557)),f=h(n(6558)),p=h(n(37));function h(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={openDialog:!1,editIndex:-1,deleteComment:null},n.handleClickDeleteComment=n.handleClickDeleteComment.bind(n),n.handleShowEdit=n.handleShowEdit.bind(n),n.handleClickOpen=n.handleClickOpen.bind(n),n.showEditComment=n.showEditComment.bind(n),n.handleConfirmDialog=n.handleConfirmDialog.bind(n),n.handleClose=n.handleClose.bind(n),n.filterRemainingComments=n.filterRemainingComments.bind(n),n.filterCommentToDelete=n.filterCommentToDelete.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"filterRemainingComments",value:function(e){var t=this.state.deleteComment;return e.commentId!==t.commentId}},{key:"filterCommentToDelete",value:function(e){var t=this.state.deleteComment;return e.commentId===t.parentCommentId}},{key:"showEditComment",value:function(e){-1===this.state.editIndex&&this.setState({editIndex:e})}},{key:"handleShowEdit",value:function(){this.setState({editIndex:-1})}},{key:"handleClickOpen",value:function(e){-1===this.state.editIndex&&this.setState({deleteComment:e,openDialog:!0})}},{key:"handleClose",value:function(){this.setState({openDialog:!1})}},{key:"handleConfirmDialog",value:function(e){e?this.handleClickDeleteComment():this.handleClose()}},{key:"handleClickDeleteComment",value:function(){var e=this,t=new p.default,n=this.state.deleteComment,a=this.props,o=a.apiId,l=a.allComments,r=a.commentsUpdate,i=n.commentId,c=n.parentCommentId;this.handleClose(),t.deleteComment(o,i).then(function(t){if(void 0===c){var n=l.filter(e.filterRemainingComments);r(n)}else{var a=l.findIndex(e.filterCommentToDelete),o=l[a].replies.filter(e.filterRemainingComments);l[a].replies=o,r(l)}}).catch(function(e){console.error(e),e.response?u.default.error(e.response.body.message):u.default.error("Something went wrong while deleting comment - "+i)})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comments,l=t.apiId,i=t.allComments,u=t.commentsUpdate,p=this.state,h=p.editIndex,g=p.openDialog;return[a&&a.map(function(t,a){return o.default.createElement("div",{key:t.commentId+"-"+a,className:n.contentWrapper},o.default.createElement(m.default,{container:!0,spacing:8,className:n.root},o.default.createElement(m.default,{item:!0},o.default.createElement(c.default,{className:n.commentIcon})),o.default.createElement(m.default,{item:!0,xs:!0,zeroMinWidth:!0},o.default.createElement(r.Typography,{noWrap:!0,className:n.commentText,variant:"body2"},t.createdBy),a!==h&&o.default.createElement(r.Typography,{className:n.commentText},t.commentText),h===a&&null,a===h&&o.default.createElement(d.default,{apiId:l,allComments:i,commentsUpdate:u,comment:t,toggleShowEdit:e.handleShowEdit}),o.default.createElement(f.default,{classes:n,comment:t,editIndex:h,index:a,showAddComment:e.showAddComment,handleClickOpen:e.handleClickOpen,showEditComment:e.showEditComment}))))}),o.default.createElement(s.default,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:"Are you sure you want to delete this comment?",labelOk:"Yes",callback:this.handleConfirmDialog,open:g})]}}]),t}();g.defaultProps={api:null},g.propTypes={classes:l.default.instanceOf(Object).isRequired,apiId:l.default.string.isRequired,allComments:l.default.instanceOf(Array).isRequired,commentsUpdate:l.default.func.isRequired,comments:l.default.instanceOf(Array).isRequired},t.default=(0,i.withStyles)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}})(g)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50cy5qc3giLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NyYy9hcHAvY29tcG9uZW50cy9TaGFyZWQvQ29uZmlybURpYWxvZy5qc3giLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NyYy9hcHAvY29tcG9uZW50cy9BcGlzL0RldGFpbHMvQ29tbWVudHMvQ29tbWVudEFkZC5qc3giLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NyYy9hcHAvY29tcG9uZW50cy9BcGlzL0RldGFpbHMvQ29tbWVudHMvQ29tbWVudEVkaXQuanN4Iiwid2VicGFjazovLy8uL3NvdXJjZS9zcmMvYXBwL2NvbXBvbmVudHMvQXBpcy9EZXRhaWxzL0NvbW1lbnRzL0NvbW1lbnRPcHRpb25zLmpzeCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50UmVwbHkuanN4Il0sIm5hbWVzIjpbIl9yZWFjdCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfc3R5bGVzIiwiX2NvcmUiLCJfQXBpQ29udGV4dCIsIkNvbW1lbnRzIiwicHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2FsbCIsInN0YXRlIiwiZXhwYW5kZWQiLCJhbGxDb21tZW50cyIsImNvbW1lbnRzIiwidG90YWxDb21tZW50cyIsInN0YXJ0Q29tbWVudHNUb0Rpc3BsYXkiLCJ1cGRhdGVDb21tZW50TGlzdCIsImJpbmQiLCJoYW5kbGVFeHBhbmRDbGljayIsImhhbmRsZUxvYWRNb3JlQ29tbWVudHMiLCJDb21wb25lbnQiLCJfdGhpczIiLCJfcHJvcHMiLCJhcGlJZCIsInRoZW1lIiwibWF0Y2giLCJwYXJhbXMiLCJhcGlfdXVpZCIsIkFQSSIsImdldEFsbENvbW1lbnRzIiwidGhlbiIsInJlc3VsdCIsImNvbW1lbnRMaXN0IiwiYm9keSIsImxpc3QiLCJzZXRTdGF0ZSIsImxlbmd0aCIsImN1c3RvbSIsImNvbW1lbnRzTGltaXQiLCJzbGljZSIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwicmVzcG9uc2UiLCJBbGVydCIsIm1lc3NhZ2UiLCJfc3RhdGUiLCJfc3RhdGUyIiwibmV3U3RhcnQiLCJkaWZmZXJlbmNlIiwibmV3VG90YWwiLCJfdGhpczMiLCJfcHJvcHMyIiwiY2xhc3NlcyIsInNob3dMYXRlc3QiLCJfc3RhdGUzIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiQXBpQ29udGV4dCIsIkNvbnN1bWVyIiwiX3JlZiIsImFwaSIsImNsYXNzTmFtZSIsImNvbnRlbnRXcmFwcGVyIiwicm9vdCIsIl9BcnJvd0Ryb3BEb3duQ2lyY2xlT3V0bGluZWQyIiwib25DbGljayIsImFyaWEtZXhwYW5kZWQiLCJUeXBvZ3JhcGh5IiwidmFyaWFudCIsInRpdGxlU3ViIiwiX0NvbW1lbnRBZGQyIiwiaWQiLCJjb21tZW50c1VwZGF0ZSIsInBhcmVudENvbW1lbnRJZCIsImNhbmNlbEJ1dHRvbiIsIl9Db21tZW50MiIsIl9HcmlkMiIsImNvbnRhaW5lciIsInNwYWNpbmciLCJpdGVtIiwidmVydGljYWxTcGFjZSIsImxpbmsiLCJsb2FkTW9yZUxpbmsiLCJfQXJyb3dEcm9wRG93bjIiLCJjb250ZXh0VHlwZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImluc3RhbmNlT2YiLCJpc1JlcXVpcmVkIiwid2l0aFN0eWxlcyIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwicGFkZGluZ1RvcCIsInVuaXQiLCJwYWRkaW5nQm90dG9tIiwibWF4V2lkdGgiLCJjb250ZW50QXJlYVdpZHRoIiwicGFkZGluZ0xlZnQiLCJ1bmlnIiwiY3Vyc29yIiwiY29sb3IiLCJwYWxldHRlIiwiZ2V0Q29udHJhc3RUZXh0IiwiYmFja2dyb3VuZCIsIm1hcmdpblRvcCIsInRleHREZWNvcmF0aW9uIiwid2l0aFRoZW1lIiwiQ29uZmlybURpYWxvZyIsIlJlYWN0IiwiYWN0aW9uIiwiY2FsbGJhY2siLCJBY3Rpb24iLCJPSyIsInRpdGxlIiwibGFiZWxDYW5jZWwiLCJsYWJlbE9rIiwib3BlbiIsIkRpYWxvZyIsIm9uQ2xvc2UiLCJoYW5kbGVSZXF1ZXN0Q2xvc2UiLCJEaWFsb2dUaXRsZSIsIkRpYWxvZ0NvbnRlbnQiLCJEaWFsb2dDb250ZW50VGV4dCIsIkRpYWxvZ0FjdGlvbnMiLCJfQnV0dG9uMiIsIkNBTkNFTCIsInN0cmluZyIsImZ1bmMiLCJib29sIiwiQ29tbWVudEFkZCIsImNvbW1lbnRUZXh0IiwiY2F0ZWdvcnkiLCJjdXJyZW50TGVuZ3RoIiwiaW5wdXRDaGFuZ2UiLCJoYW5kbGVDbGlja0FkZENvbW1lbnQiLCJoYW5kbGVDbGlja0NhbmNlbCIsImhhbmRsZUNhdGVnb3J5Q2hhbmdlIiwiZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkiLCJ0YXJnZXQiLCJ2YWx1ZSIsInRvZ2dsZVNob3dSZXBseSIsImV2ZW50IiwiY29tbWVudFRvRmlsdGVyIiwiY29tbWVudElkIiwiQXBpIiwiY29tbWVudCIsInRyaW0iLCJyZXBsYWNlIiwiYWRkQ29tbWVudCIsIm5ld0NvbW1lbnQiLCJhZGRlZENvbW1lbnQiLCJwdXNoIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJyZXBsaWVzIiwieHMiLCJ6ZXJvTWluV2lkdGgiLCJfRm9ybUNvbnRyb2wyIiwiX1NlbGVjdDIiLCJvbkNoYW5nZSIsIl9NZW51SXRlbTIiLCJUZXh0RmllbGQiLCJhdXRvRm9jdXMiLCJtdWx0aWxpbmUiLCJ0ZXh0RmllbGQiLCJtYXJnaW4iLCJwbGFjZWhvbGRlciIsImlucHV0UHJvcHMiLCJtYXhMZW5ndGgiLCJtYXhDb21tZW50TGVuZ3RoIiwiYWxpZ24iLCJCdXR0b24iLCJidXR0b24iLCJkZWZhdWx0UHJvcHMiLCJBcnJheSIsImNvbW1lbnRJY29uIiwid2lkdGgiLCJDb21tZW50RWRpdCIsImhhbmRsZUNsaWNrVXBkYXRlQ29tbWVudCIsImZpbHRlckNvbW1lbnRUb1VwZGF0ZSIsImZpbHRlckNvbW1lbnRUb1VwZGF0ZVJlcGx5IiwidG9nZ2xlU2hvd0VkaXQiLCJjb21tZW50VG9FZGl0IiwidXBkYXRlQ29tbWVudCIsInVwZGF0ZWRDb21tZW50IiwidW5kZWZpbmVkIiwicmVwbHlJbmRleCIsIl9wcm9wczMiLCJtYXJnaW5SaWdodCIsIkNvbW1lbnRPcHRpb25zIiwic2hvd0FkZENvbW1lbnQiLCJzaG93RWRpdENvbW1lbnQiLCJoYW5kbGVDbGlja09wZW4iLCJlZGl0SW5kZXgiLCJ0aW1lc3RhbXAiLCJsb2NhbERhdGUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiaG91ciIsIm1pbnV0ZSIsIl9wcm9wczQiLCJrZXkiLCJjb21wb25lbnQiLCJkaXNhYmxlIiwiX1ZlcnRpY2FsRGl2aWRlcjIiLCJoZWlnaHQiLCJjcmVhdGVkQnkiLCJBdXRoTWFuYWdlciIsImdldFVzZXIiLCJuYW1lIiwiYWRtaW5Sb2xlIiwiZW50cnlQb2ludCIsInRpbWUiLCJkaXNwbGF5RGF0ZSIsImNyZWF0ZWRUaW1lIiwibnVtYmVyIiwiZGlzYWJsZUNvbG9yIiwid2hpdGVTcGFjZSIsIm92ZXJmbG93V3JhcCIsIkNvbW1lbnQiLCJvcGVuRGlhbG9nIiwiZGVsZXRlQ29tbWVudCIsImhhbmRsZUNsaWNrRGVsZXRlQ29tbWVudCIsImhhbmRsZVNob3dFZGl0IiwiaGFuZGxlU2hvd1JlcGx5IiwiaGFuZGxlQ29uZmlybURpYWxvZyIsImhhbmRsZUNsb3NlIiwiZmlsdGVyUmVtYWluaW5nQ29tbWVudHMiLCJmaWx0ZXJDb21tZW50VG9EZWxldGUiLCJjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSIsInBhcmVudENvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlIiwicmVtYWluaW5nQ29tbWVudHMiLCJmaWx0ZXIiLCJyZW1haW5pbmdSZXBsaWVzIiwicmV2ZXJzZSIsIm1hcCIsIl9BY2NvdW50Qm94MiIsIm5vV3JhcCIsIl9Db21tZW50RWRpdDIiLCJfQ29tbWVudE9wdGlvbnMyIiwiX0NvbW1lbnRSZXBseTIiLCJfQ29uZmlybURpYWxvZzIiLCJDb21tZW50UmVwbHkiXSwibWFwcGluZ3MiOiJxWUFpQkFBLEVBQUFDLEVBQUEsY0FDQUEsRUFBQSxJQUNBQyxFQUFBRCxFQUFBLFFBQ0FBLEVBQUEsVUFDQUEsRUFBQSxNQUNBRSxFQUFBRixFQUFBLFNBQ0FBLEVBQUEsV0FDQUEsRUFBQSxVQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxLQUNBRyxFQUFBSCxFQUFBLHlEQUVBLElBZ0NNSSxjQU9GLFNBQUFBLEVBQVlDLGdHQUFPQyxDQUFBQyxLQUFBSCxHQUFBLElBQUFJLG1LQUFBQyxDQUFBRixNQUFBSCxFQUFBTSxXQUFBQyxPQUFBQyxlQUFBUixJQUFBUyxLQUFBTixLQUNURixJQURTLE9BRWZHLEVBQUtNLE1BQVEsQ0FDVEMsVUFBVSxFQUNWQyxZQUFhLEdBQ2JDLFNBQVUsR0FDVkMsY0FBZSxFQUNmQyx1QkFBd0IsR0FFNUJYLEVBQUtZLGtCQUFvQlosRUFBS1ksa0JBQWtCQyxLQUF2QmIsR0FDekJBLEVBQUtjLGtCQUFvQmQsRUFBS2Msa0JBQWtCRCxLQUF2QmIsR0FDekJBLEVBQUtlLHVCQUF5QmYsRUFBS2UsdUJBQXVCRixLQUE1QmIsR0FYZkEscVVBUEFnQiw0REF5QkMsSUFBQUMsRUFBQWxCLEtBQUFtQixFQUNjbkIsS0FBS0YsTUFBN0JzQixFQURVRCxFQUNWQyxNQUFPQyxFQURHRixFQUNIRSxNQUFPQyxFQURKSCxFQUNJRyxNQUNoQkEsSUFBUUYsRUFBUUUsRUFBTUMsT0FBT0MsV0FDakIsSUFBSUMsV0FDWkMsZUFBZU4sR0FDbEJPLEtB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M0IsRUFBQTdGLEVBQUE4RixZQXpOQSxTQUFBbkUsR0FBQSxNQUFVLENBQ3JCMkQsS0FBTSxDQUNGbUIsTUFBTzlFLEVBQU0rRSxRQUFRQyxnQkFBZ0JoRixFQUFNK0UsUUFBUUUsV0FBV2hELFNBQzlENEMsT0FBUSxXQUVaNEUsWUFBYSxDQUNUM0UsTUFBTzlFLEVBQU0rRSxRQUFRQyxnQkFBZ0JoRixFQUFNK0UsUUFBUUUsV0FBV2hELFVBRWxFMkUsWUFBYSxDQUNUOUIsTUFBTzlFLEVBQU0rRSxRQUFRQyxnQkFBZ0JoRixFQUFNK0UsUUFBUUUsV0FBV2hELFNBQzlEaUQsVUFBV2xGLEVBQU13RCxRQUFRb0IsS0FDekI4RSxNQUFPLE9BQ1A2QyxXQUFZLFdBQ1pDLGFBQWMsY0FFbEIvSixLQUFNLENBQ0Z5QyxVQUFnQyxJQUFyQmxGLEVBQU13RCxRQUFRZSxNQUU3Qi9CLGVBQWdCLENBQ1ppQyxTQUFVekUsRUFBTWEsT0FBTzZELGlCQUN2QkMsWUFBa0MsRUFBckIzRSxFQUFNd0QsUUFBUWUsS0FDM0JELFdBQVl0RSxFQUFNd0QsUUFBUW9CLFFBb01uQixDQUFtQm9KIiwiZmlsZSI6IkNvbW1lbnRzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IEFycm93RHJvcERvd25DaXJjbGVPdXRsaW5lZCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQXJyb3dEcm9wRG93bkNpcmNsZU91dGxpbmVkJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkL0dyaWQnO1xuaW1wb3J0IEFsZXJ0IGZyb20gJy4uLy4uLy4uL1NoYXJlZC9BbGVydCc7XG5pbXBvcnQgQ29tbWVudCBmcm9tICcuL0NvbW1lbnQnO1xuaW1wb3J0IENvbW1lbnRBZGQgZnJvbSAnLi9Db21tZW50QWRkJztcbmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9hcGknO1xuaW1wb3J0IHsgQXBpQ29udGV4dCB9IGZyb20gJy4uL0FwaUNvbnRleHQnO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICB9LFxuICAgIGNvbnRlbnRXcmFwcGVyOiB7XG4gICAgICAgIG1heFdpZHRoOiB0aGVtZS5jdXN0b20uY29udGVudEFyZWFXaWR0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICB9LFxuICAgIHRpdGxlU3ViOiB7XG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICAgIHZlcnRpY2FsU3BhY2U6IHtcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLjIsXG4gICAgfSxcbiAgICBsb2FkTW9yZUxpbms6IHtcbiAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgIH0sXG59KTtcblxuLyoqXG4gICAqIERpc3BsYXkgYSBjb21tZW50IGxpc3RcbiAgICogQGNsYXNzIENvbW1lbnRzXG4gICAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuY2xhc3MgQ29tbWVudHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IEFwaUNvbnRleHQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tZW50c1xuICAgICAqIEBwYXJhbSB7Kn0gcHJvcHMgcHJvcGVyaWVzIHBhc3NlZCBieSB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsbENvbW1lbnRzOiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgICAgIHRvdGFsQ29tbWVudHM6IDAsXG4gICAgICAgICAgICBzdGFydENvbW1lbnRzVG9EaXNwbGF5OiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbW1lbnRMaXN0ID0gdGhpcy51cGRhdGVDb21tZW50TGlzdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUV4cGFuZENsaWNrID0gdGhpcy5oYW5kbGVFeHBhbmRDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUxvYWRNb3JlQ29tbWVudHMgPSB0aGlzLmhhbmRsZUxvYWRNb3JlQ29tbWVudHMuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldHMgYWxsIHRoZSBjb21tZW50cyBmb3IgYSBwYXJ0aWN1bGFyIEFQSSwgd2hlbiBjb21wb25lbnQgbW91bnRzXG4gICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAqL1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBsZXQgeyBhcGlJZCwgdGhlbWUsIG1hdGNoIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiggbWF0Y2ggKSBhcGlJZCA9IG1hdGNoLnBhcmFtcy5hcGlfdXVpZDtcbiAgICAgICAgY29uc3QgcmVzdEFwaSA9IG5ldyBBUEkoKTtcbiAgICAgICAgcmVzdEFwaS5nZXRBbGxDb21tZW50cyhhcGlJZClcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50TGlzdCA9IHJlc3VsdC5ib2R5Lmxpc3Q7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFsbENvbW1lbnRzOiBjb21tZW50TGlzdCwgdG90YWxDb21tZW50czogY29tbWVudExpc3QubGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjb21tZW50TGlzdC5sZW5ndGggPCB0aGVtZS5jdXN0b20uY29tbWVudHNMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3RhcnRDb21tZW50c1RvRGlzcGxheTogMCwgY29tbWVudHM6IGNvbW1lbnRMaXN0LnNsaWNlKDAsIGNvbW1lbnRMaXN0Lmxlbmd0aCkgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IGNvbW1lbnRMaXN0Lmxlbmd0aCAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0LCBjb21tZW50czogY29tbWVudExpc3Quc2xpY2UoY29tbWVudExpc3QubGVuZ3RoIC0gdGhlbWUuY3VzdG9tLmNvbW1lbnRzTGltaXQsIGNvbW1lbnRMaXN0Lmxlbmd0aCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoZXJyb3IucmVzcG9uc2UuYm9keS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBBbGVydC5lcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgcmV0cmlldmluZyBjb21tZW50cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgbG9hZGluZyB0aGUgcHJldmlvdXMgY29tbWVudHNcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICBoYW5kbGVMb2FkTW9yZUNvbW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHRvdGFsQ29tbWVudHMsIHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXksIGFsbENvbW1lbnRzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IHRoZW1lIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoc3RhcnRDb21tZW50c1RvRGlzcGxheSAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdGFydENvbW1lbnRzVG9EaXNwbGF5OiAwLCBjb21tZW50czogYWxsQ29tbWVudHMuc2xpY2UoMCwgdG90YWxDb21tZW50cykgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3RhcnRDb21tZW50c1RvRGlzcGxheTogc3RhcnRDb21tZW50c1RvRGlzcGxheSAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0LCBjb21tZW50czogYWxsQ29tbWVudHMuc2xpY2Uoc3RhcnRDb21tZW50c1RvRGlzcGxheSAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0LCB0b3RhbENvbW1lbnRzKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZXhwYW5kaW5nIHRoZSBjb21tZW50IHNlY3Rpb25cbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICBoYW5kbGVFeHBhbmRDbGljaygpIHtcbiAgICAgICAgY29uc3QgeyBleHBhbmRlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4cGFuZGVkOiAhZXhwYW5kZWQgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29tbWVudCBsaXN0LCBUaGlzIGlzIHBhc3NlZCB0aHJvdWdoIHByb3BzIHRvIGNoaWxkIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7YW55fSBjb21tZW50cyBVcGRhdGVkIGNvbW1lbnQgbGlzdFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50c1xuICAgICAqL1xuICAgIHVwZGF0ZUNvbW1lbnRMaXN0KGNvbW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRDb21tZW50c1RvRGlzcGxheSwgdG90YWxDb21tZW50cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyB0aGVtZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgbGV0IG5ld1N0YXJ0OyBsZXQgZGlmZmVyZW5jZTsgbGV0XG4gICAgICAgICAgICBuZXdUb3RhbDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFsbENvbW1lbnRzOiBjb21tZW50cyB9KTtcbiAgICAgICAgaWYgKHRvdGFsQ29tbWVudHMgPCB0aGVtZS5jdXN0b20uY29tbWVudHNMaW1pdCkge1xuICAgICAgICAgICAgbmV3VG90YWwgPSBjb21tZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3RhcnRDb21tZW50c1RvRGlzcGxheTogMCwgdG90YWxDb21tZW50czogbmV3VG90YWwsIGNvbW1lbnRzIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRvdGFsQ29tbWVudHMgPD0gY29tbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaWZmZXJlbmNlID0gY29tbWVudHMubGVuZ3RoIC0gdG90YWxDb21tZW50cztcbiAgICAgICAgICAgIG5ld1N0YXJ0ID0gc3RhcnRDb21tZW50c1RvRGlzcGxheSArIGRpZmZlcmVuY2U7XG4gICAgICAgICAgICBuZXdUb3RhbCA9IGNvbW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdGFydENvbW1lbnRzVG9EaXNwbGF5OiBuZXdTdGFydCwgdG90YWxDb21tZW50czogbmV3VG90YWwsIGNvbW1lbnRzOiBjb21tZW50cy5zbGljZShuZXdTdGFydCwgbmV3VG90YWwpIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IHRvdGFsQ29tbWVudHMgLSBjb21tZW50cy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc3RhcnRDb21tZW50c1RvRGlzcGxheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gc3RhcnRDb21tZW50c1RvRGlzcGxheTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhcnQgPSBzdGFydENvbW1lbnRzVG9EaXNwbGF5IC0gZGlmZmVyZW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1RvdGFsID0gY29tbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IG5ld1N0YXJ0LCB0b3RhbENvbW1lbnRzOiBuZXdUb3RhbCwgY29tbWVudHM6IGNvbW1lbnRzLnNsaWNlKG5ld1N0YXJ0LCBuZXdUb3RhbCkgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICogUmVuZGVyIG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XG4gICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbW1lbnQgaHRtbCBjb21wb25lbnRcbiAgICogQG1lbWJlcm9mIENvbW1lbnRzXG4gICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzLCBzaG93TGF0ZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjb21tZW50cywgZXhwYW5kZWQsIGFsbENvbW1lbnRzLCBzdGFydENvbW1lbnRzVG9EaXNwbGF5LCB0b3RhbENvbW1lbnRzLFxuICAgICAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcGlDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgICAgeyh7IGFwaSB9KSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50V3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgeyFzaG93TGF0ZXN0ICYmIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxuICAgICAgICAgICAgICAgICAgICA8QXJyb3dEcm9wRG93bkNpcmNsZU91dGxpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUV4cGFuZENsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD17ZXhwYW5kZWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUV4cGFuZENsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0nZGlzcGxheTEnXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGl0bGVTdWJ9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgQ29tbWVudHNcbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgICAgICB7IXNob3dMYXRlc3QgJiYgPENvbW1lbnRBZGQgYXBpSWQ9e2FwaS5pZH0gY29tbWVudHNVcGRhdGU9e3RoaXMudXBkYXRlQ29tbWVudExpc3R9IGFsbENvbW1lbnRzPXthbGxDb21tZW50c30gcGFyZW50Q29tbWVudElkPXtudWxsfSBjYW5jZWxCdXR0b249e2ZhbHNlfSAvPn1cbiAgICAgICAgICAgICAgICA8Q29tbWVudCBjb21tZW50cz17Y29tbWVudHN9IGFwaUlkPXthcGkuaWR9IGNvbW1lbnRzVXBkYXRlPXt0aGlzLnVwZGF0ZUNvbW1lbnRMaXN0fSBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9IC8+XG4gICAgICAgICAgICAgICAgeyBzdGFydENvbW1lbnRzVG9EaXNwbGF5ICE9PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY29udGVudFdyYXBwZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17MzJ9IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLnZlcnRpY2FsU3BhY2V9IHZhcmlhbnQ9J2JvZHkyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtjbGFzc2VzLmxpbmsgKyAnICcgKyBjbGFzc2VzLmxvYWRNb3JlTGlua30gb25DbGljaz17dGhpcy5oYW5kbGVMb2FkTW9yZUNvbW1lbnRzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWQgUHJldmlvdXMgQ29tbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBcnJvd0Ryb3BEb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTG9hZE1vcmVDb21tZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmxpbmsgKyAnICcgKyBjbGFzc2VzLnZlcnRpY2FsU3BhY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLnZlcnRpY2FsU3BhY2V9IHZhcmlhbnQ9J2JvZHkyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hvd2luZyBjb21tZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRvdGFsQ29tbWVudHMgLSBzdGFydENvbW1lbnRzVG9EaXNwbGF5ICsgJyBvZiAnICsgdG90YWxDb21tZW50cyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9BcGlDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ29tbWVudHMucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDb21tZW50cyk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBXU08yIEluYy4gKGh0dHA6Ly93d3cud3NvMi5vcmcpIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogV1NPMiBJbmMuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLFxuICogVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gICAgRGlhbG9nLCBEaWFsb2dBY3Rpb25zLCBEaWFsb2dDb250ZW50LCBEaWFsb2dDb250ZW50VGV4dCwgRGlhbG9nVGl0bGUsXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogUmVhY3QgY29tcG9uZW50IGZvciBoYW5kbGluZyBjb25maXJtYXRpb24gZGlhbG9nIGJveFxuICogQGNsYXNzIENvbmZpcm1EaWFsb2dcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gKi9cbmNsYXNzIENvbmZpcm1EaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIElmIHVzZXIgY29uZmlybXMgdGhlIGFjdGlvbiBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggdHJ1ZSBlbHNlIGZhbHNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbiBPbmUgb2YgQ29uZmlybURpYWxvZy5BY3Rpb24gYWN0aW9uc1xuICAgICAqIEBtZW1iZXJvZiBDb25maXJtRGlhbG9nXG4gICAgICovXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlKGFjdGlvbikge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoYWN0aW9uID09PSBDb25maXJtRGlhbG9nLkFjdGlvbi5PSykge1xuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbmZpcm1hdGlvbiBib3hcbiAgICAgKiBAbWVtYmVyb2YgQ29uZmlybURpYWxvZ1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGl0bGUsIG1lc3NhZ2UsIGxhYmVsQ2FuY2VsLCBsYWJlbE9rLCBvcGVuLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPERpYWxvZyBvcGVuPXtvcGVufSBvbkNsb3NlPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX0+XG4gICAgICAgICAgICAgICAgPERpYWxvZ1RpdGxlPnt0aXRsZSB8fCAnUGxlYXNlIENvbmZpcm0nfTwvRGlhbG9nVGl0bGU+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxEaWFsb2dDb250ZW50VGV4dD57bWVzc2FnZSB8fCAnQXJlIHlvdSBzdXJlPyd9PC9EaWFsb2dDb250ZW50VGV4dD5cbiAgICAgICAgICAgICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0FjdGlvbnM+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoQ29uZmlybURpYWxvZy5BY3Rpb24uQ0FOQ0VMKX0gY29sb3I9J3ByaW1hcnknPlxuICAgICAgICAgICAgICAgICAgICAgICAge2xhYmVsQ2FuY2VsIHx8ICdDYW5jZWwnfVxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZShDb25maXJtRGlhbG9nLkFjdGlvbi5PSyl9IGNvbG9yPSdwcmltYXJ5Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbE9rIHx8ICdPSyd9XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvRGlhbG9nQWN0aW9ucz5cbiAgICAgICAgICAgIDwvRGlhbG9nPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ29uZmlybURpYWxvZy5wcm9wVHlwZXMgPSB7XG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBtZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGFiZWxDYW5jZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBsYWJlbE9rOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgY2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbn07XG5Db25maXJtRGlhbG9nLkFjdGlvbiA9IHtcbiAgICBPSzogJ29rJyxcbiAgICBDQU5DRUw6ICdjYW5jZWwnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlybURpYWxvZztcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHtUZXh0RmllbGQsIEJ1dHRvbiwgVHlwb2dyYXBoeX0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IE1lbnVJdGVtIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL01lbnVJdGVtJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvU2VsZWN0JztcbmltcG9ydCBBbGVydCBmcm9tICcuLi8uLi8uLi9TaGFyZWQvQWxlcnQnO1xuaW1wb3J0IEFQSSBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL2FwaSc7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgY29tbWVudEljb246IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICB9LFxuICAgIGNvbW1lbnRUZXh0OiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdClcbiAgICB9LFxuICAgIGNvbnRlbnRXcmFwcGVyOiB7XG4gICAgICAgIG1heFdpZHRoOiB0aGVtZS5jdXN0b20uY29udGVudEFyZWFXaWR0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgIH0sXG4gICAgdGV4dEZpZWxkOiB7XG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgd2lkdGg6ICc4OCUnLFxuICAgIH0sXG4gICAgY2F0ZWdvcnk6IHtcbiAgICAgICAgd2lkdGg6ICcxMiUnLFxuICAgIH0sXG59KTtcblxuLyoqXG4gICAqIERpc3BsYXkgYSBjb21wb25lbnQgdG8gYWRkIGEgbmV3IGNvbW1lbnRcbiAgICogQGNsYXNzIENvbW1tZW50QWRkXG4gICAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuY2xhc3MgQ29tbWVudEFkZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tZW50QWRkXG4gICAgICogQHBhcmFtIHsqfSBwcm9wcyBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tbWVudFRleHQ6ICcnLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICdHZW5lcmFsJyxcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGg6IDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5wdXRDaGFuZ2UgPSB0aGlzLmlucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tBZGRDb21tZW50ID0gdGhpcy5oYW5kbGVDbGlja0FkZENvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja0NhbmNlbCA9IHRoaXMuaGFuZGxlQ2xpY2tDYW5jZWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDYXRlZ29yeUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5maWx0ZXJDb21tZW50VG9BZGRSZXBseSA9IHRoaXMuZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBjb21tZW50IHRleHQgd2hlbiBpbnB1dCBjaGFuZ2VzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHt0YXJnZXR9IHRhcmdldCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRBZGRcbiAgICAgKi9cbiAgICBpbnB1dENoYW5nZSh7IHRhcmdldCB9KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb21tZW50VGV4dDogdGFyZ2V0LnZhbHVlLCBjdXJyZW50TGVuZ3RoOiB0YXJnZXQudmFsdWUubGVuZ3RoIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjb21wb25lbnQgdG8gYWRkIGEgbmV3IGNvbW1lbnQgd2hlbiBjYW5jZWxsZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrQ2FuY2VsKCkge1xuICAgICAgICBjb25zdCB7IHRvZ2dsZVNob3dSZXBseSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdG9nZ2xlU2hvd1JlcGx5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBjYXRlZ29yeSB3aGVuIHRoZSBjYXRlZ29yeSBpcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHthbnl9IGV2ZW50IERyb3AgZG93biBzZWxlY3QgZXZlbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGhhbmRsZUNhdGVnb3J5Q2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjYXRlZ29yeTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnQgdG8gYWRkIHRoZSByZXBseVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgcGFyZW50Q29tbWVudElkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gY29tbWVudFRvRmlsdGVyLmNvbW1lbnRJZCA9PT0gcGFyZW50Q29tbWVudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYWRkaW5nIGEgbmV3IGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrQWRkQ29tbWVudCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYXBpSWQsIHBhcmVudENvbW1lbnRJZCwgYWxsQ29tbWVudHMsIHRvZ2dsZVNob3dSZXBseSwgY29tbWVudHNVcGRhdGUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBjb21tZW50VGV4dCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgQXBpID0gbmV3IEFQSSgpO1xuICAgICAgICBjb25zdCBjb21tZW50ID0ge1xuICAgICAgICAgICAgYXBpSWQsXG4gICAgICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgICAgIGNvbW1lbnRUZXh0OiBjb21tZW50VGV4dC50cmltKCksXG4gICAgICAgICAgICBwYXJlbnRDb21tZW50SWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdG8gY2hlY2sgd2hldGhlciBhIHN0cmluZyBkb2VzIG5vdCBjb250YWluIG9ubHkgd2hpdGUgc3BhY2VzXG4gICAgICAgIGlmIChjb21tZW50LmNvbW1lbnRUZXh0LnJlcGxhY2UoL1xccy9nLCAnJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBBcGkuYWRkQ29tbWVudChhcGlJZCwgY29tbWVudClcbiAgICAgICAgICAgICAgICAudGhlbigobmV3Q29tbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29tbWVudFRleHQ6ICcnLCBjYXRlZ29yeTogJ0dlbmVyYWwnIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRlZENvbW1lbnQgPSBuZXdDb21tZW50LmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb21tZW50SWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzLnB1c2goYWRkZWRDb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxsQ29tbWVudHMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMucHVzaChhZGRlZENvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2hvd1JlcGx5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHNVcGRhdGUoYWxsQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbGVydC5lcnJvcihlcnJvci5yZXNwb25zZS5ib2R5Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGFkZGluZyB0aGUgY29tbWVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBbGVydC5lcnJvcignWW91IGNhbm5vdCBlbnRlciBhIGJsYW5rIGNvbW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudExlbmd0aDogMCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbWV0aG9kIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50fSBDb21tZW50IGh0bWwgY29tcG9uZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRBZGRcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xhc3NlcywgY2FuY2VsQnV0dG9uLCB0aGVtZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeSwgY29tbWVudFRleHQsIGN1cnJlbnRMZW5ndGggfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17MjR9IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50V3JhcHBlcn0+XG5cbiAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzIHplcm9NaW5XaWR0aD5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT17Y2xhc3Nlcy5jYXRlZ29yeX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NhdGVnb3J5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNhdGVnb3J5Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT0nR2VuZXJhbCc+R2VuZXJhbDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPSdGZWF0dXJlIFJlcXVlc3QnPkZlYXR1cmUgUmVxdWVzdDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPSdCdWcgUmVwb3J0Jz5CdWcgUmVwb3J0PC9NZW51SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD0nc3RhbmRhcmQtbXVsdGlsaW5lLWZsZXhpYmxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy50ZXh0RmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW49J25vcm1hbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdXcml0ZSBhIGNvbW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7IG1heExlbmd0aDogdGhlbWUuY3VzdG9tLm1heENvbW1lbnRMZW5ndGggfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb21tZW50VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuY29tbWVudFRleHR9IGFsaWduPSdyaWdodCc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y3VycmVudExlbmd0aCArICcvJyArIHRoZW1lLmN1c3RvbS5tYXhDb21tZW50TGVuZ3RoIH1cbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17OH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0nY29udGFpbmVkJyBjb2xvcj0ncHJpbWFyeScgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGlja0FkZENvbW1lbnQoKX0+XG4gICAgICAgICAgICAgICAgICBBZGQgQ29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAge2NhbmNlbEJ1dHRvblxuICAgICAgICAgICAgICAgICYmIChcbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGlja0NhbmNlbCgpfSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT5DYW5jZWw8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkNvbW1lbnRBZGQuZGVmYXVsdFByb3BzID0ge1xuICAgIHBhcmVudENvbW1lbnRJZDogbnVsbCxcbiAgICB0b2dnbGVTaG93UmVwbHk6IG51bGwsXG4gICAgY29tbWVudHNVcGRhdGU6IG51bGwsXG59O1xuXG5Db21tZW50QWRkLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihPYmplY3QpLmlzUmVxdWlyZWQsXG4gICAgY2FuY2VsQnV0dG9uOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGFwaUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcGFyZW50Q29tbWVudElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvZ2dsZVNob3dSZXBseTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY29tbWVudHNVcGRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGFsbENvbW1lbnRzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDb21tZW50QWRkKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHtUZXh0RmllbGQsIEJ1dHRvbiwgVHlwb2dyYXBoeX0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9NZW51SXRlbSc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdCc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBBbGVydCBmcm9tICcuLi8uLi8uLi9TaGFyZWQvQWxlcnQnO1xuaW1wb3J0IEFQSSBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL2FwaSc7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgdGV4dEZpZWxkOiB7XG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgd2lkdGg6ICc4Ny41JScsXG4gICAgfSxcbiAgICBjb250ZW50V3JhcHBlcjoge1xuICAgICAgICBtYXhXaWR0aDogdGhlbWUuY3VzdG9tLmNvbnRlbnRBcmVhV2lkdGgsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICB9LFxuICAgIGNhdGVnb3J5OiB7XG4gICAgICAgIHdpZHRoOiAnMTIlJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICcwLjUlJyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICAgKiBEaXNwbGF5IGEgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50XG4gICAqIEBjbGFzcyBDb21tbWVudEVkaXRcbiAgICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG5jbGFzcyBDb21tZW50RWRpdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tZW50RWRpdFxuICAgICAqIEBwYXJhbSB7Kn0gcHJvcHMgcHJvcGVyaWVzIHBhc3NlZCBieSB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb21tZW50VGV4dDogJycsXG4gICAgICAgICAgICBjYXRlZ29yeTogJycsXG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoOiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlucHV0Q2hhbmdlID0gdGhpcy5pbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNhdGVnb3J5Q2hhbmdlID0gdGhpcy5oYW5kbGVDYXRlZ29yeUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrVXBkYXRlQ29tbWVudCA9IHRoaXMuaGFuZGxlQ2xpY2tVcGRhdGVDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tDYW5jZWwgPSB0aGlzLmhhbmRsZUNsaWNrQ2FuY2VsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlID0gdGhpcy5maWx0ZXJDb21tZW50VG9VcGRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5maWx0ZXJDb21tZW50VG9VcGRhdGVSZXBseSA9IHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlUmVwbHkuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyBjb21tZW50IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29tbWVudFRleHQ6IGNvbW1lbnQuY29tbWVudFRleHQsIGNhdGVnb3J5OiBjb21tZW50LmNhdGVnb3J5LCBjdXJyZW50TGVuZ3RoOiBjb21tZW50LmNvbW1lbnRUZXh0Lmxlbmd0aCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBjb21tZW50IHRleHQgd2hlbiBpbnB1dCBjaGFuZ2VzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHt0YXJnZXR9IHRhcmdldCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRFZGl0XG4gICAgICovXG4gICAgaW5wdXRDaGFuZ2UoeyB0YXJnZXQgfSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29tbWVudFRleHQ6IHRhcmdldC52YWx1ZSwgY3VycmVudExlbmd0aDogdGFyZ2V0LnZhbHVlLmxlbmd0aCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50IHdoZW4gY2FuY2VsbGVkXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRFZGl0XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2tDYW5jZWwoKSB7XG4gICAgICAgIGNvbnN0IHsgdG9nZ2xlU2hvd0VkaXQsIGNvbW1lbnRzVXBkYXRlLCBhbGxDb21tZW50cyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdG9nZ2xlU2hvd0VkaXQoKTtcbiAgICAgICAgY29tbWVudHNVcGRhdGUoYWxsQ29tbWVudHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgY2F0ZWdvcnkgd2hlbiB0aGUgY2F0ZWdvcnkgaXMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7YW55fSBldmVudCBEcm9wIGRvd24gc2VsZWN0IGV2ZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRFZGl0XG4gICAgICovXG4gICAgaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNhdGVnb3J5OiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0aGUgY29tbWVudCB0byB1cGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGZpbHRlckNvbW1lbnRUb1VwZGF0ZShjb21tZW50VG9GaWx0ZXIpIHtcbiAgICAgICAgY29uc3QgeyBjb21tZW50IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gY29tbWVudFRvRmlsdGVyLmNvbW1lbnRJZCA9PT0gY29tbWVudC5jb21tZW50SWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0aGUgY29tbWVudCB0byB1cGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGZpbHRlckNvbW1lbnRUb1VwZGF0ZVJlcGx5KGNvbW1lbnRUb0ZpbHRlcikge1xuICAgICAgICBjb25zdCB7IGNvbW1lbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiBjb21tZW50VG9GaWx0ZXIuY29tbWVudElkID09PSBjb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHVwZGF0aW5nIGEgY29tbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50RWRpdFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrVXBkYXRlQ29tbWVudCgpIHtcbiAgICAgICAgY29uc3QgeyBhcGlJZCwgY29tbWVudCwgYWxsQ29tbWVudHMsIHRvZ2dsZVNob3dFZGl0LCBjb21tZW50c1VwZGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeSwgY29tbWVudFRleHQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IEFwaSA9IG5ldyBBUEkoKTtcbiAgICAgICAgY29uc3QgY29tbWVudFRvRWRpdCA9IGNvbW1lbnQ7XG4gICAgICAgIGNvbW1lbnRUb0VkaXQuY29tbWVudFRleHQgPSBjb21tZW50VGV4dC50cmltKCk7XG4gICAgICAgIGNvbW1lbnRUb0VkaXQuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcblxuICAgICAgICAvLyB0byBjaGVjayB3aGV0aGVyIGEgc3RyaW5nIGRvZXMgbm90IGNvbnRhaW4gb25seSB3aGl0ZWhpcyBzcGFjZXNcbiAgICAgICAgaWYgKGNvbW1lbnQuY29tbWVudFRleHQucmVwbGFjZSgvXFxzL2csICcnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFwaS51cGRhdGVDb21tZW50KGFwaUlkLCBjb21tZW50VG9FZGl0LmNvbW1lbnRJZCwgY29tbWVudFRvRWRpdClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDb21tZW50ID0gcmVzdWx0LmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50VG9FZGl0LnBhcmVudENvbW1lbnRJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGFsbENvbW1lbnRzLmZpbmRJbmRleCh0aGlzLmZpbHRlckNvbW1lbnRUb1VwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50c1tpbmRleF0uY2F0ZWdvcnkgPSB1cGRhdGVkQ29tbWVudC5jYXRlZ29yeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzW2luZGV4XS5jb21tZW50VGV4dCA9IHVwZGF0ZWRDb21tZW50LmNvbW1lbnRUZXh0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhbGxDb21tZW50cy5maW5kSW5kZXgodGhpcy5maWx0ZXJDb21tZW50VG9VcGRhdGVSZXBseSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBseUluZGV4ID0gYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzW2luZGV4XS5yZXBsaWVzW3JlcGx5SW5kZXhdID0gdXBkYXRlZENvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2hvd0VkaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHNVcGRhdGUoYWxsQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbGVydC5lcnJvcihlcnJvci5yZXNwb25zZS5ib2R5Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGFkZGluZyB0aGUgY29tbWVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBbGVydC5lcnJvcignWW91IGNhbm5vdCBlbnRlciBhIGJsYW5rIGNvbW1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudFxuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbW1lbnQgaHRtbCBjb21wb25lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xhc3NlcywgdGhlbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIGNvbW1lbnRUZXh0LCBjdXJyZW50TGVuZ3RoIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPXtjbGFzc2VzLmNhdGVnb3J5fT5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NhdGVnb3J5fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2F0ZWdvcnlDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT0nR2VuZXJhbCc+R2VuZXJhbDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9J0ZlYXR1cmUgUmVxdWVzdCc+RmVhdHVyZSBSZXF1ZXN0PC9NZW51SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT0nQnVnIFJlcG9ydCc+QnVnIFJlcG9ydDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICBpZD0nbXVsdGlsaW5lLXN0YXRpYydcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGV4dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW49J25vcm1hbCdcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J1dyaXRlIGEgY29tbWVudCdcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyBtYXhMZW5ndGg6IHRoZW1lLmN1c3RvbS5tYXhDb21tZW50TGVuZ3RoIH19XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb21tZW50VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuY29tbWVudFRleHR9IGFsaWduPSdyaWdodCc+XG4gICAgICAgICAgICAgICAgICAgIHtjdXJyZW50TGVuZ3RoICsgJy8nICsgdGhlbWUuY3VzdG9tLm1heENvbW1lbnRMZW5ndGggfVxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17OH0+XG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9J2NvbnRhaW5lZCcgY29sb3I9J3ByaW1hcnknIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ2xpY2tVcGRhdGVDb21tZW50KCl9PlxuICAgICAgICAgICAgICBTYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNsaWNrQ2FuY2VsKCl9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259PkNhbmNlbDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Db21tZW50RWRpdC5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGFwaUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWxsQ29tbWVudHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEFycmF5KS5pc1JlcXVpcmVkLFxuICAgIGNvbW1lbnRzVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHRvZ2dsZVNob3dFZGl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbW1lbnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDb21tZW50RWRpdCk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBXU08yIEluYy4gKGh0dHA6Ly93d3cud3NvMi5vcmcpIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogV1NPMiBJbmMuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLFxuICogVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkL0dyaWQnO1xuaW1wb3J0IHsgVHlwb2dyYXBoeSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IFZlcnRpY2FsRGl2aWRlciBmcm9tICcuLi8uLi8uLi9TaGFyZWQvVmVydGljYWxEaXZpZGVyJztcbmltcG9ydCBBdXRoTWFuYWdlciBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL0F1dGhNYW5hZ2VyJztcblxuY29uc3Qgc3R5bGVzID0gdGhlbWUgPT4gKHtcbiAgICBsaW5rOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCksXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIH0sXG4gICAgdGltZToge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDAuMyxcbiAgICB9LFxuICAgIHZlcnRpY2FsU3BhY2U6IHtcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLjIsXG4gICAgfSxcbiAgICBkaXNhYmxlOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5jdXN0b20uZGlzYWJsZUNvbG9yLFxuICAgIH0sXG4gICAgY29tbWVudEljb246IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICB9LFxuICAgIGNvbW1lbnRUZXh0OiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCksXG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bmlnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnLFxuICAgICAgICBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJyxcbiAgICB9LFxuICAgIHJvb3Q6IHtcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLjUsXG4gICAgfSxcbiAgICBjb250ZW50V3JhcHBlcjoge1xuICAgICAgICBtYXhXaWR0aDogdGhlbWUuY3VzdG9tLmNvbnRlbnRBcmVhV2lkdGgsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgfSxcbn0pO1xuXG5cbi8qKlxuICogQ29tcG9uZW50IHRvIGRpc3BsYXkgb3B0aW9ucyBvZiB0aGUgY29tbWVudFxuICogQGNsYXNzIENvbW1lbnRPcHRpb25zXG4gKiBAZXh0ZW5kcyB7UmVhY3QuQ29tcG9uZW50fVxuICovXG5jbGFzcyBDb21tZW50T3B0aW9ucyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tZW50QWRkXG4gICAgICogQHBhcmFtIHsqfSBwcm9wcyBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2hvd0FkZENvbW1lbnQgPSB0aGlzLnNob3dBZGRDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2hvd0VkaXRDb21tZW50ID0gdGhpcy5zaG93RWRpdENvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja09wZW4gPSB0aGlzLmhhbmRsZUNsaWNrT3Blbi5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBjb21wb25lbnQgdG8gYWRkIGEgbmV3IGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge2FueX0gaW5kZXggSW5kZXggb2YgY29tbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudE9wdGlvbnNcbiAgICAgKi9cbiAgICBzaG93QWRkQ29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCwgc2hvd0FkZENvbW1lbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChlZGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBzaG93QWRkQ29tbWVudChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBzaG93RWRpdENvbW1lbnQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXgsIHNob3dFZGl0Q29tbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHNob3dFZGl0Q29tbWVudChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29uZmltYXRpb24gZGlhbG9nIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tbWVudCBDb21tZW50IHRoYXQgaGFzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrT3Blbihjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZWRpdEluZGV4LCBoYW5kbGVDbGlja09wZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChlZGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBoYW5kbGVDbGlja09wZW4oY29tbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkYXRlIGFuZCB0aW1lIGluIGEgcGFydGljdWxhciBmb3JtYXRcbiAgICAgKiBAcGFyYW0ge2FueX0gdGltZXN0YW1wIFRpbWVzdGFtcCB0aGF0IGhhcyB0byBiZSBmb3JtYXR0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudE9wdGlvbnNcbiAgICAgKi9cbiAgICBkaXNwbGF5RGF0ZSh0aW1lc3RhbXApIHtcbiAgICAgICAgY29uc3QgbG9jYWxEYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcbiAgICAgICAgY29uc3QgbG9jYWxEYXRlU3RyaW5nID0gbG9jYWxEYXRlLnRvTG9jYWxlRGF0ZVN0cmluZyh1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICAgICAgbW9udGg6ICdzaG9ydCcsXG4gICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsb2NhbFRpbWVTdHJpbmcgPSBsb2NhbERhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBsb2NhbERhdGVTdHJpbmcgKyAnICcgKyBsb2NhbFRpbWVTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XG4gICAgICogQHJldHVybnMge1JlYWN0LkNvbXBvbmVudH0gQ29tbWVudCBodG1sIGNvbXBvbmVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50T3B0aW9uc1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3NlcywgY29tbWVudCwgZWRpdEluZGV4LCBpbmRleCwgdGhlbWUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezh9IGNsYXNzTmFtZT17Y2xhc3Nlcy52ZXJ0aWNhbFNwYWNlfSBrZXk9e2NvbW1lbnQuY29tbWVudElkfT5cbiAgICAgICAgICAgICAgICB7IGNvbW1lbnQucGFyZW50Q29tbWVudElkID09IG51bGxcbiAgICAgICAgICAgICAgICAmJiBbPEdyaWQgaXRlbSBrZXk9J2tleS1yZXBseSc+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD0nYScgY2xhc3NOYW1lPXsoZWRpdEluZGV4ID09PSAtMSA/IGNsYXNzZXMubGluayA6IGNsYXNzZXMuZGlzYWJsZSl9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2hvd0FkZENvbW1lbnQoaW5kZXgpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFJlcGx5XG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIGtleT0na2V5LXJlcGx5LXZlcnRpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsRGl2aWRlciBoZWlnaHQ9ezE1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB7Lyogb25seSB0aGUgY29tbWVudCBvd25lciBvciBhZG1pbiBjYW4gZGVsZXRlIGEgY29tbWVudCAqL31cbiAgICAgICAgICAgICAgICB7KGNvbW1lbnQuY3JlYXRlZEJ5ID09PSBBdXRoTWFuYWdlci5nZXRVc2VyKCkubmFtZSB8fCBBdXRoTWFuYWdlci5nZXRVc2VyKCkubmFtZSA9PT0gdGhlbWUuY3VzdG9tLmFkbWluUm9sZSlcbiAgICAgICAgICAgICAgICAmJiBbPEdyaWQgaXRlbSBrZXk9J2tleS1kZWxldGUnPlxuICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9J2EnIGNsYXNzTmFtZT17KGVkaXRJbmRleCA9PT0gLTEgPyBjbGFzc2VzLmxpbmsgOiBjbGFzc2VzLmRpc2FibGUpfSBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNsaWNrT3Blbihjb21tZW50KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktZGVsZXRlLXZlcnRpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsRGl2aWRlciBoZWlnaHQ9ezE1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB7Lyogb25seSB0aGUgY29tbWVudCBvd25lciBjYW4gbW9kaWZ5IHRoZSBjb21tZW50IGZyb20gdGhlIGV4YWN0IGVudHJ5IHBvaW50ICovfVxuICAgICAgICAgICAgICAgIHsoY29tbWVudC5jcmVhdGVkQnkgPT09IEF1dGhNYW5hZ2VyLmdldFVzZXIoKS5uYW1lICYmIGNvbW1lbnQuZW50cnlQb2ludCA9PT0gJ0FQSVN0b3JlJylcbiAgICAgICAgICAgICAgICAmJiBbPEdyaWQgaXRlbSBrZXk9J2tleS1lZGl0Jz5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PSdhJyBjbGFzc05hbWU9eyhlZGl0SW5kZXggPT09IC0xID8gY2xhc3Nlcy5saW5rIDogY2xhc3Nlcy5kaXNhYmxlKX0gb25DbGljaz17KCkgPT4gdGhpcy5zaG93RWRpdENvbW1lbnQoaW5kZXgpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIEVkaXRcbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktZWRpdC12ZXJpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsRGl2aWRlciBoZWlnaHQ9ezE1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMudGltZX0+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD0nYScgdmFyaWFudD0nY2FwdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5kaXNwbGF5RGF0ZShjb21tZW50LmNyZWF0ZWRUaW1lKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cblxuICAgICAgICAgICAgICAgIHtlZGl0SW5kZXggPT09IGluZGV4ID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IFs8R3JpZCBpdGVtIGtleT0na2V5LWNhdGVnb3J5LXZlcnRpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsRGl2aWRlciBoZWlnaHQ9ezE1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMudGltZX0ga2V5PSdrZXktY2F0ZWdvcnknPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD0nYScgdmFyaWFudD0nY2FwdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb21tZW50LmNhdGVnb3J5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Db21tZW50T3B0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgc2hvd0FkZENvbW1lbnQ6IG51bGwsXG59O1xuXG5Db21tZW50T3B0aW9ucy5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGVkaXRJbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgY29tbWVudDogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZUNsaWNrT3BlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaG93RWRpdENvbW1lbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0FkZENvbW1lbnQ6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHsgd2l0aFRoZW1lOiB0cnVlIH0pKENvbW1lbnRPcHRpb25zKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS8nO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgQWNjb3VudEJveCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQWNjb3VudEJveCc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBBbGVydCBmcm9tICcuLi8uLi8uLi9TaGFyZWQvQWxlcnQnO1xuaW1wb3J0IENvbmZpcm1EaWFsb2cgZnJvbSAnLi4vLi4vLi4vU2hhcmVkL0NvbmZpcm1EaWFsb2cnO1xuaW1wb3J0IENvbW1lbnRBZGQgZnJvbSAnLi9Db21tZW50QWRkJztcbmltcG9ydCBDb21tZW50RWRpdCBmcm9tICcuL0NvbW1lbnRFZGl0JztcbmltcG9ydCBDb21tZW50T3B0aW9ucyBmcm9tICcuL0NvbW1lbnRPcHRpb25zJztcbmltcG9ydCBDb21tZW50UmVwbHkgZnJvbSAnLi9Db21tZW50UmVwbHknO1xuaW1wb3J0IEFQSSBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL2FwaSc7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgbGluazoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICAgIGNvbW1lbnRJY29uOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCksXG4gICAgfSxcbiAgICBjb21tZW50VGV4dDoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyxcbiAgICAgICAgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgfSxcbiAgICByb290OiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMi41LFxuICAgIH0sXG4gICAgY29udGVudFdyYXBwZXI6IHtcbiAgICAgICAgbWF4V2lkdGg6IHRoZW1lLmN1c3RvbS5jb250ZW50QXJlYVdpZHRoLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bmlnLFxuICAgIH0sXG59KTtcblxuLyoqXG4gICAqIERpc3BsYXkgYSBwYXJ0aWN1bGFyIGNvbW1lbnQgYW5kIGRldGFpbHNcbiAgICogQGNsYXNzIENvbW1lbnRcbiAgICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG5jbGFzcyBDb21tZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENvbW1lbnRcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBvcGVuRGlhbG9nOiBmYWxzZSxcbiAgICAgICAgICAgIHJlcGx5SW5kZXg6IC0xLFxuICAgICAgICAgICAgZWRpdEluZGV4OiAtMSxcbiAgICAgICAgICAgIGRlbGV0ZUNvbW1lbnQ6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tEZWxldGVDb21tZW50ID0gdGhpcy5oYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTaG93RWRpdCA9IHRoaXMuaGFuZGxlU2hvd0VkaXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTaG93UmVwbHkgPSB0aGlzLmhhbmRsZVNob3dSZXBseS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrT3BlbiA9IHRoaXMuaGFuZGxlQ2xpY2tPcGVuLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2hvd0FkZENvbW1lbnQgPSB0aGlzLnNob3dBZGRDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2hvd0VkaXRDb21tZW50ID0gdGhpcy5zaG93RWRpdENvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDb25maXJtRGlhbG9nID0gdGhpcy5oYW5kbGVDb25maXJtRGlhbG9nLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UgPSB0aGlzLmhhbmRsZUNsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZmlsdGVyUmVtYWluaW5nQ29tbWVudHMgPSB0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZmlsdGVyQ29tbWVudFRvRGVsZXRlID0gdGhpcy5maWx0ZXJDb21tZW50VG9EZWxldGUuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRoZSBjb21tZW50cyB0byBiZSByZW1haW5lZFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgZmlsdGVyUmVtYWluaW5nQ29tbWVudHMoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsZXRlQ29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRUb0ZpbHRlci5jb21tZW50SWQgIT09IGRlbGV0ZUNvbW1lbnQuY29tbWVudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnRzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGZpbHRlckNvbW1lbnRUb0RlbGV0ZShjb21tZW50VG9GaWx0ZXIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxldGVDb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gY29tbWVudFRvRmlsdGVyLmNvbW1lbnRJZCA9PT0gZGVsZXRlQ29tbWVudC5wYXJlbnRDb21tZW50SWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGNvbXBvbmVudCB0byBhZGQgYSBuZXcgY29tbWVudFxuICAgICAqIEBwYXJhbSB7YW55fSBpbmRleCBJbmRleCBvZiBjb21tZW50IGluIHRoZSBhcnJheVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgc2hvd0FkZENvbW1lbnQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXggfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChlZGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVwbHlJbmRleDogaW5kZXggfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBzaG93RWRpdENvbW1lbnQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXggfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChlZGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdEluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjb21wb25lbnQgdG8gZWRpdCBhIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge2FueX0gaW5kZXggSW5kZXggb2YgY29tbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZVNob3dFZGl0KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdEluZGV4OiAtMSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29tcG9uZW50IHRvIGFkZCBhIG5ldyBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBoYW5kbGVTaG93UmVwbHkoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXBseUluZGV4OiAtMSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29uZmltYXRpb24gZGlhbG9nIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tbWVudCBDb21tZW50IHRoYXQgaGFzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrT3Blbihjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZWRpdEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAoZWRpdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlbGV0ZUNvbW1lbnQ6IGNvbW1lbnQsIG9wZW5EaWFsb2c6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29uZmltYXRpb24gZGlhbG9nIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZUNsb3NlKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbkRpYWxvZzogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgQ29uZmlybSBEaWFsb2dcbiAgICAgKiBAcGFyYW0geyp9IGJvb2wgcHJvcGVyaWVzIHBhc3NlZCBieSB0aGUgQ29uZmlybSBEaWFsb2dcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZUNvbmZpcm1EaWFsb2cobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZGVsZXRpbmcgYSBjb21tZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBoYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IEFwaSA9IG5ldyBBUEkoKTtcbiAgICAgICAgY29uc3QgeyBkZWxldGVDb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGFwaUlkLCBhbGxDb21tZW50cywgY29tbWVudHNVcGRhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlID0gZGVsZXRlQ29tbWVudC5jb21tZW50SWQ7XG4gICAgICAgIGNvbnN0IHBhcmVudENvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlID0gZGVsZXRlQ29tbWVudC5wYXJlbnRDb21tZW50SWQ7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UoKTtcblxuICAgICAgICBBcGkuZGVsZXRlQ29tbWVudChhcGlJZCwgY29tbWVudElkT2ZDb21tZW50VG9EZWxldGUpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nQ29tbWVudHMgPSBhbGxDb21tZW50cy5maWx0ZXIodGhpcy5maWx0ZXJSZW1haW5pbmdDb21tZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlKHJlbWFpbmluZ0NvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGFsbENvbW1lbnRzLmZpbmRJbmRleCh0aGlzLmZpbHRlckNvbW1lbnRUb0RlbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ1JlcGxpZXMgPSBhbGxDb21tZW50c1tpbmRleF0ucmVwbGllcy5maWx0ZXIodGhpcy5maWx0ZXJSZW1haW5pbmdDb21tZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzW2luZGV4XS5yZXBsaWVzID0gcmVtYWluaW5nUmVwbGllcztcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHNVcGRhdGUoYWxsQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0LmVycm9yKGVycm9yLnJlc3BvbnNlLmJvZHkubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoYFNvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGRlbGV0aW5nIGNvbW1lbnQgLSAke2NvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudFxuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbW1lbnQgaHRtbCBjb21wb25lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3NlcywgY29tbWVudHMsIGFwaUlkLCBhbGxDb21tZW50cywgY29tbWVudHNVcGRhdGUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCwgcmVwbHlJbmRleCwgb3BlbkRpYWxvZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIFtjb21tZW50c1xuICAgICAgJiYgY29tbWVudHMuc2xpY2UoMCkucmV2ZXJzZSgpLm1hcCgoY29tbWVudCwgaW5kZXgpID0+IChcbiAgICAgICAgICA8ZGl2IGtleT17Y29tbWVudC5jb21tZW50SWQgKyAnLScgKyBpbmRleH0gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnRXcmFwcGVyfT5cbiAgICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPEFjY291bnRCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmNvbW1lbnRJY29ufSAvPlxuICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cyB6ZXJvTWluV2lkdGg+XG4gICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgbm9XcmFwIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0gdmFyaWFudD0nYm9keTInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29tbWVudC5jcmVhdGVkQnl9XG4gICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuXG4gICAgICAgICAgICAgICAgICAgICAge2luZGV4ICE9PSBlZGl0SW5kZXhcbiAgICAgICAgICAgICAgJiZcbiAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAge2NvbW1lbnQuY29tbWVudFRleHR9XG4gICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgeyhpbmRleCA9PT0gZWRpdEluZGV4KVxuICAgICAgICAgICAgICAmJiA8Q29tbWVudEVkaXQgYXBpSWQ9e2FwaUlkfSBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9IGNvbW1lbnRzVXBkYXRlPXtjb21tZW50c1VwZGF0ZX0gY29tbWVudD17Y29tbWVudH0gdG9nZ2xlU2hvd0VkaXQ9e3RoaXMuaGFuZGxlU2hvd0VkaXR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnRPcHRpb25zIGNsYXNzZXM9e2NsYXNzZXN9IGNvbW1lbnQ9e2NvbW1lbnR9IGVkaXRJbmRleD17ZWRpdEluZGV4fSBpbmRleD17aW5kZXh9IHNob3dBZGRDb21tZW50PXt0aGlzLnNob3dBZGRDb21tZW50fSBoYW5kbGVDbGlja09wZW49e3RoaXMuaGFuZGxlQ2xpY2tPcGVufSBzaG93RWRpdENvbW1lbnQ9e3RoaXMuc2hvd0VkaXRDb21tZW50fSAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgeyhpbmRleCA9PT0gcmVwbHlJbmRleClcbiAgICAgICAgICAgICAgJiYgPENvbW1lbnRBZGQgYXBpSWQ9e2FwaUlkfSBwYXJlbnRDb21tZW50SWQ9e2NvbW1lbnQuY29tbWVudElkfSBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9IGNvbW1lbnRzVXBkYXRlPXtjb21tZW50c1VwZGF0ZX0gdG9nZ2xlU2hvd1JlcGx5PXt0aGlzLmhhbmRsZVNob3dSZXBseX0gY2FuY2VsQnV0dG9uIC8+XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHtjb21tZW50LnJlcGxpZXMubGVuZ3RoICE9PSAwXG4gICAgICAgICAgICAgICYmIDxDb21tZW50UmVwbHkgY2xhc3Nlcz17Y2xhc3Nlc30gYXBpSWQ9e2FwaUlkfSBjb21tZW50cz17Y29tbWVudC5yZXBsaWVzfSBjb21tZW50c1VwZGF0ZT17Y29tbWVudHNVcGRhdGV9IGFsbENvbW1lbnRzPXthbGxDb21tZW50c30gLz59XG4gICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgKSksXG4gICAgICAgICAgICAgICAgPENvbmZpcm1EaWFsb2cga2V5PSdrZXktZGlhbG9nJyBsYWJlbENhbmNlbD0nQ2FuY2VsJyB0aXRsZT0nQ29uZmlybSBEZWxldGUnIG1lc3NhZ2U9J0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBjb21tZW50PycgbGFiZWxPaz0nWWVzJyBjYWxsYmFjaz17dGhpcy5oYW5kbGVDb25maXJtRGlhbG9nfSBvcGVuPXtvcGVuRGlhbG9nfSAvPixcbiAgICAgICAgICAgIF1cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkNvbW1lbnQucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBhcGlJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFsbENvbW1lbnRzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSkuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50c1VwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50czogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcykoQ29tbWVudCk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBXU08yIEluYy4gKGh0dHA6Ly93d3cud3NvMi5vcmcpIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogV1NPMiBJbmMuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLFxuICogVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IEFjY291bnRCb3ggZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0FjY291bnRCb3gnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vLi4vLi4vU2hhcmVkL0FsZXJ0JztcbmltcG9ydCBDb25maXJtRGlhbG9nIGZyb20gJy4uLy4uLy4uL1NoYXJlZC9Db25maXJtRGlhbG9nJztcbmltcG9ydCBDb21tZW50RWRpdCBmcm9tICcuL0NvbW1lbnRFZGl0JztcbmltcG9ydCBDb21tZW50T3B0aW9ucyBmcm9tICcuL0NvbW1lbnRPcHRpb25zJztcbmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9hcGknO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGxpbms6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgfSxcbiAgICBjb21tZW50SWNvbjoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgIH0sXG4gICAgY29tbWVudFRleHQ6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsXG4gICAgICAgIG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnLFxuICAgIH0sXG4gICAgcm9vdDoge1xuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIuNSxcbiAgICB9LFxuICAgIGNvbnRlbnRXcmFwcGVyOiB7XG4gICAgICAgIG1heFdpZHRoOiB0aGVtZS5jdXN0b20uY29udGVudEFyZWFXaWR0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICogRGlzcGxheSBhIHBhcnRpY3VsYXIgY29tbWVudCBhbmQgZGV0YWlsc1xuICogQGNsYXNzIENvbW1lbnRSZXBseVxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAqL1xuY2xhc3MgQ29tbWVudFJlcGx5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENvbW1lbnRcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW5EaWFsb2c6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdEluZGV4OiAtMSxcbiAgICAgICAgICAgIGRlbGV0ZUNvbW1lbnQ6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tEZWxldGVDb21tZW50ID0gdGhpcy5oYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTaG93RWRpdCA9IHRoaXMuaGFuZGxlU2hvd0VkaXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja09wZW4gPSB0aGlzLmhhbmRsZUNsaWNrT3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNob3dFZGl0Q29tbWVudCA9IHRoaXMuc2hvd0VkaXRDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ29uZmlybURpYWxvZyA9IHRoaXMuaGFuZGxlQ29uZmlybURpYWxvZy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlID0gdGhpcy5oYW5kbGVDbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzID0gdGhpcy5maWx0ZXJSZW1haW5pbmdDb21tZW50cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlckNvbW1lbnRUb0RlbGV0ZSA9IHRoaXMuZmlsdGVyQ29tbWVudFRvRGVsZXRlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0aGUgY29tbWVudHMgdG8gYmUgcmVtYWluZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgZmlsdGVyUmVtYWluaW5nQ29tbWVudHMoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsZXRlQ29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRUb0ZpbHRlci5jb21tZW50SWQgIT09IGRlbGV0ZUNvbW1lbnQuY29tbWVudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnRzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgZmlsdGVyQ29tbWVudFRvRGVsZXRlKGNvbW1lbnRUb0ZpbHRlcikge1xuICAgICAgICBjb25zdCB7IGRlbGV0ZUNvbW1lbnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiBjb21tZW50VG9GaWx0ZXIuY29tbWVudElkID09PSBkZWxldGVDb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIHNob3dFZGl0Q29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IGluZGV4IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIGNvbXBvbmVudCB0byBlZGl0IGEgY29tbWVudFxuICAgICAqIEBwYXJhbSB7YW55fSBpbmRleCBJbmRleCBvZiBjb21tZW50IGluIHRoZSBhcnJheVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50UmVwbHlcbiAgICAgKi9cbiAgICBoYW5kbGVTaG93RWRpdCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRJbmRleDogLTEgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGNvbmZpbWF0aW9uIGRpYWxvZyB0byBkZWxldGUgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbW1lbnQgQ29tbWVudCB0aGF0IGhhcyB0byBiZSBkZWxldGVkXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrT3Blbihjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZWRpdEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAoZWRpdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlbGV0ZUNvbW1lbnQ6IGNvbW1lbnQsIG9wZW5EaWFsb2c6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29uZmltYXRpb24gZGlhbG9nIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgaGFuZGxlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuRGlhbG9nOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBwYXJhbSB7Kn0gYm9vbCBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBtZW1iZXJvZiBDb21tZW50UmVwbHlcbiAgICAgKi9cbiAgICBoYW5kbGVDb25maXJtRGlhbG9nKG1lc3NhZ2Upe1xuICAgICAgICBpZiAobWVzc2FnZSl7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNsaWNrRGVsZXRlQ29tbWVudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBkZWxldGluZyBhIGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2tEZWxldGVDb21tZW50KCkge1xuICAgICAgICBjb25zdCBBcGkgPSBuZXcgQVBJKCk7XG4gICAgICAgIGNvbnN0IHsgZGVsZXRlQ29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBhcGlJZCwgYWxsQ29tbWVudHMsIGNvbW1lbnRzVXBkYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSA9IGRlbGV0ZUNvbW1lbnQuY29tbWVudElkO1xuICAgICAgICBjb25zdCBwYXJlbnRDb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSA9IGRlbGV0ZUNvbW1lbnQucGFyZW50Q29tbWVudElkO1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG5cbiAgICAgICAgQXBpLmRlbGV0ZUNvbW1lbnQoYXBpSWQsIGNvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0NvbW1lbnRzID0gYWxsQ29tbWVudHMuZmlsdGVyKHRoaXMuZmlsdGVyUmVtYWluaW5nQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50c1VwZGF0ZShyZW1haW5pbmdDb21tZW50cyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhbGxDb21tZW50cy5maW5kSW5kZXgodGhpcy5maWx0ZXJDb21tZW50VG9EZWxldGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5pbmdSZXBsaWVzID0gYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMuZmlsdGVyKHRoaXMuZmlsdGVyUmVtYWluaW5nQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50c1tpbmRleF0ucmVwbGllcyA9IHJlbWFpbmluZ1JlcGxpZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlKGFsbENvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBBbGVydC5lcnJvcihlcnJvci5yZXNwb25zZS5ib2R5Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0LmVycm9yKGBTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSBkZWxldGluZyBjb21tZW50IC0gJHtjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbWV0aG9kIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50fSBDb21tZW50IGh0bWwgY29tcG9uZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzLCBjb21tZW50cywgYXBpSWQsIGFsbENvbW1lbnRzLCBjb21tZW50c1VwZGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXgsIG9wZW5EaWFsb2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBbY29tbWVudHNcbiAgICAgICAgICAgICYmIGNvbW1lbnRzLm1hcCgoY29tbWVudCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17Y29tbWVudC5jb21tZW50SWQgKyAnLScgKyBpbmRleH0gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnRXcmFwcGVyfT5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjY291bnRCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmNvbW1lbnRJY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cyB6ZXJvTWluV2lkdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgbm9XcmFwIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0gdmFyaWFudD0nYm9keTInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29tbWVudC5jcmVhdGVkQnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2luZGV4ICE9PSBlZGl0SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29tbWVudC5jb21tZW50VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZWRpdEluZGV4ID09PSBpbmRleCAmJiBudWxsfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhpbmRleCA9PT0gZWRpdEluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIDxDb21tZW50RWRpdCBhcGlJZD17YXBpSWR9IGFsbENvbW1lbnRzPXthbGxDb21tZW50c30gY29tbWVudHNVcGRhdGU9e2NvbW1lbnRzVXBkYXRlfSBjb21tZW50PXtjb21tZW50fSB0b2dnbGVTaG93RWRpdD17dGhpcy5oYW5kbGVTaG93RWRpdH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnRPcHRpb25zIGNsYXNzZXM9e2NsYXNzZXN9IGNvbW1lbnQ9e2NvbW1lbnR9IGVkaXRJbmRleD17ZWRpdEluZGV4fSBpbmRleD17aW5kZXh9IHNob3dBZGRDb21tZW50PXt0aGlzLnNob3dBZGRDb21tZW50fSBoYW5kbGVDbGlja09wZW49e3RoaXMuaGFuZGxlQ2xpY2tPcGVufSBzaG93RWRpdENvbW1lbnQ9e3RoaXMuc2hvd0VkaXRDb21tZW50fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIDxDb25maXJtRGlhbG9nIGtleT0na2V5LWRpYWxvZycgbGFiZWxDYW5jZWw9eydDYW5jZWwnfSB0aXRsZT17J0NvbmZpcm0gRGVsZXRlJ30gbWVzc2FnZT17J0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBjb21tZW50Pyd9IGxhYmVsT2s9eydZZXMnfSBjYWxsYmFjaz17dGhpcy5oYW5kbGVDb25maXJtRGlhbG9nfSBvcGVuPXtvcGVuRGlhbG9nfS8+LFxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ29tbWVudFJlcGx5LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBhcGk6IG51bGwsXG59O1xuXG5Db21tZW50UmVwbHkucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBhcGlJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFsbENvbW1lbnRzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSkuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50c1VwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50czogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcykoQ29tbWVudFJlcGx5KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=